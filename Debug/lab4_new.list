
lab4_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003474  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a4  080035a4  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  080035a4  080035a4  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a4  080035a4  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080035ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200000e0  0800368c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800368c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5dc  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002043  00000000  00000000  0002b6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c76  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfde  00000000  00000000  0004684e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b3c  00000000  00000000  0005382c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  000d93bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003568 	.word	0x08003568

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08003568 	.word	0x08003568

0800014c <subKeyProcess>:
	int gpio_pin[NUMBER_BUTTONS] 			= {button1_Pin, button2_Pin, button3_Pin};
	GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port};

	// set flag
	void subKeyProcess(int key_index)
	{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
		button_flag[key_index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200000fc 	.word	0x200000fc

0800016c <isButtonPressed>:


	int isButtonPressed(int key_index)
	{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
		if(button_flag[key_index] == 1)
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		{
			button_flag[key_index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
		}
		return 0;
 800018e:	2300      	movs	r3, #0
	}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200000fc 	.word	0x200000fc

080001a0 <getKeyInput>:

	void getKeyInput()
	{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
		for(int i = 0; i < NUMBER_BUTTONS; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e077      	b.n	800029c <getKeyInput+0xfc>
		{
			key_reg_0[i] = key_reg_1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			key_reg_1[i] = key_reg_2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			key_reg_2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 80001cc:	4a3a      	ldr	r2, [pc, #232]	; (80002b8 <getKeyInput+0x118>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4939      	ldr	r1, [pc, #228]	; (80002bc <getKeyInput+0x11c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	4619      	mov	r1, r3
 80001e0:	4610      	mov	r0, r2
 80001e2:	f002 f8bb 	bl	800235c <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4619      	mov	r1, r3
 80001ea:	4a32      	ldr	r2, [pc, #200]	; (80002b4 <getKeyInput+0x114>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((key_reg_0[i] == key_reg_1[i]) && (key_reg_1[i] == key_reg_2[i]))
 80001f2:	4a2f      	ldr	r2, [pc, #188]	; (80002b0 <getKeyInput+0x110>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	492c      	ldr	r1, [pc, #176]	; (80002ac <getKeyInput+0x10c>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d147      	bne.n	8000296 <getKeyInput+0xf6>
 8000206:	4a29      	ldr	r2, [pc, #164]	; (80002ac <getKeyInput+0x10c>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	4929      	ldr	r1, [pc, #164]	; (80002b4 <getKeyInput+0x114>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000216:	429a      	cmp	r2, r3
 8000218:	d13d      	bne.n	8000296 <getKeyInput+0xf6>
			{
				if(key_reg_3[i] != key_reg_2[i]) // press and drop
 800021a:	4a29      	ldr	r2, [pc, #164]	; (80002c0 <getKeyInput+0x120>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	4924      	ldr	r1, [pc, #144]	; (80002b4 <getKeyInput+0x114>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d016      	beq.n	800025c <getKeyInput+0xbc>
				{
					key_reg_3[i] = key_reg_2[i];
 800022e:	4a21      	ldr	r2, [pc, #132]	; (80002b4 <getKeyInput+0x114>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4922      	ldr	r1, [pc, #136]	; (80002c0 <getKeyInput+0x120>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(key_reg_2[i] == PRESSED_STATE)
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d125      	bne.n	8000296 <getKeyInput+0xf6>
					{
						subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff7e 	bl	800014c <subKeyProcess>
						time_for_key_press[i] = 200;
 8000250:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <getKeyInput+0x124>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	21c8      	movs	r1, #200	; 0xc8
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025a:	e01c      	b.n	8000296 <getKeyInput+0xf6>
					}
				}
				else // press and hold
				{
					time_for_key_press[i] --;
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <getKeyInput+0x124>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000264:	1e5a      	subs	r2, r3, #1
 8000266:	4917      	ldr	r1, [pc, #92]	; (80002c4 <getKeyInput+0x124>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(time_for_key_press[i] <= 0)
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <getKeyInput+0x124>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dc0d      	bgt.n	8000296 <getKeyInput+0xf6>
					{
						if(key_reg_2[i] == PRESSED_STATE)
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <getKeyInput+0x114>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d102      	bne.n	800028c <getKeyInput+0xec>
						{
							subKeyProcess(i);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f7ff ff60 	bl	800014c <subKeyProcess>
						}
						time_for_key_press[i] = 200;
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <getKeyInput+0x124>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	21c8      	movs	r1, #200	; 0xc8
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < NUMBER_BUTTONS; i++)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	dd84      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000018 	.word	0x20000018
 80002b8:	20000048 	.word	0x20000048
 80002bc:	2000003c 	.word	0x2000003c
 80002c0:	20000024 	.word	0x20000024
 80002c4:	20000030 	.word	0x20000030

080002c8 <fsm_automatic_run>:


#include"fsm_automatic.h"

	void fsm_automatic_run()
	{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	af00      	add	r7, sp, #0
		switch(status)
 80002cc:	4b82      	ldr	r3, [pc, #520]	; (80004d8 <fsm_automatic_run+0x210>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	f200 82f2 	bhi.w	80008bc <fsm_automatic_run+0x5f4>
 80002d8:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <fsm_automatic_run+0x18>)
 80002da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002de:	bf00      	nop
 80002e0:	080002f5 	.word	0x080002f5
 80002e4:	08000395 	.word	0x08000395
 80002e8:	080004f5 	.word	0x080004f5
 80002ec:	0800062b 	.word	0x0800062b
 80002f0:	08000789 	.word	0x08000789
		{
			case INIT:
				clearLed();
 80002f4:	f000 fddc 	bl	8000eb0 <clearLed>
				status = REDX_GREENY_AUTO; // next state
 80002f8:	4b77      	ldr	r3, [pc, #476]	; (80004d8 <fsm_automatic_run+0x210>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	601a      	str	r2, [r3, #0]
				counter1 = red_timer;
 80002fe:	4b77      	ldr	r3, [pc, #476]	; (80004dc <fsm_automatic_run+0x214>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a77      	ldr	r2, [pc, #476]	; (80004e0 <fsm_automatic_run+0x218>)
 8000304:	6013      	str	r3, [r2, #0]
				counter2 = green_timer;
 8000306:	4b77      	ldr	r3, [pc, #476]	; (80004e4 <fsm_automatic_run+0x21c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a77      	ldr	r2, [pc, #476]	; (80004e8 <fsm_automatic_run+0x220>)
 800030c:	6013      	str	r3, [r2, #0]
				updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 800030e:	4b74      	ldr	r3, [pc, #464]	; (80004e0 <fsm_automatic_run+0x218>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a76      	ldr	r2, [pc, #472]	; (80004ec <fsm_automatic_run+0x224>)
 8000314:	fb82 1203 	smull	r1, r2, r2, r3
 8000318:	1092      	asrs	r2, r2, #2
 800031a:	17db      	asrs	r3, r3, #31
 800031c:	1ad4      	subs	r4, r2, r3
 800031e:	4b70      	ldr	r3, [pc, #448]	; (80004e0 <fsm_automatic_run+0x218>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b72      	ldr	r3, [pc, #456]	; (80004ec <fsm_automatic_run+0x224>)
 8000324:	fb83 1302 	smull	r1, r3, r3, r2
 8000328:	1099      	asrs	r1, r3, #2
 800032a:	17d3      	asrs	r3, r2, #31
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	460b      	mov	r3, r1
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	440b      	add	r3, r1
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	1ad1      	subs	r1, r2, r3
 8000338:	4b6b      	ldr	r3, [pc, #428]	; (80004e8 <fsm_automatic_run+0x220>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a6b      	ldr	r2, [pc, #428]	; (80004ec <fsm_automatic_run+0x224>)
 800033e:	fb82 0203 	smull	r0, r2, r2, r3
 8000342:	1092      	asrs	r2, r2, #2
 8000344:	17db      	asrs	r3, r3, #31
 8000346:	1ad5      	subs	r5, r2, r3
 8000348:	4b67      	ldr	r3, [pc, #412]	; (80004e8 <fsm_automatic_run+0x220>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b67      	ldr	r3, [pc, #412]	; (80004ec <fsm_automatic_run+0x224>)
 800034e:	fb83 0302 	smull	r0, r3, r3, r2
 8000352:	1098      	asrs	r0, r3, #2
 8000354:	17d3      	asrs	r3, r2, #31
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4603      	mov	r3, r0
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4403      	add	r3, r0
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	1ad0      	subs	r0, r2, r3
 8000362:	4603      	mov	r3, r0
 8000364:	462a      	mov	r2, r5
 8000366:	4620      	mov	r0, r4
 8000368:	f001 f80a 	bl	8001380 <updateLedBufferVal>
				set_timer(1, green_timer*1000);
 800036c:	4b5d      	ldr	r3, [pc, #372]	; (80004e4 <fsm_automatic_run+0x21c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	4619      	mov	r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	f001 fa9c 	bl	80018b8 <set_timer>
				set_timer(2, 1000);
 8000380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000384:	2002      	movs	r0, #2
 8000386:	f001 fa97 	bl	80018b8 <set_timer>
				set_timer(5, 250);
 800038a:	21fa      	movs	r1, #250	; 0xfa
 800038c:	2005      	movs	r0, #5
 800038e:	f001 fa93 	bl	80018b8 <set_timer>
				break;
 8000392:	e29c      	b.n	80008ce <fsm_automatic_run+0x606>

			case REDX_GREENY_AUTO:
				displayLed(REDX_GREENY);
 8000394:	2014      	movs	r0, #20
 8000396:	f001 f80d 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 800039a:	2002      	movs	r0, #2
 800039c:	f001 faac 	bl	80018f8 <is_time_expired>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d03d      	beq.n	8000422 <fsm_automatic_run+0x15a>
				{
					set_timer(2, 1000);
 80003a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003aa:	2002      	movs	r0, #2
 80003ac:	f001 fa84 	bl	80018b8 <set_timer>
					counter1--;
 80003b0:	4b4b      	ldr	r3, [pc, #300]	; (80004e0 <fsm_automatic_run+0x218>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	4a4a      	ldr	r2, [pc, #296]	; (80004e0 <fsm_automatic_run+0x218>)
 80003b8:	6013      	str	r3, [r2, #0]
					counter2--;
 80003ba:	4b4b      	ldr	r3, [pc, #300]	; (80004e8 <fsm_automatic_run+0x220>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a49      	ldr	r2, [pc, #292]	; (80004e8 <fsm_automatic_run+0x220>)
 80003c2:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80003c4:	4b46      	ldr	r3, [pc, #280]	; (80004e0 <fsm_automatic_run+0x218>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a48      	ldr	r2, [pc, #288]	; (80004ec <fsm_automatic_run+0x224>)
 80003ca:	fb82 1203 	smull	r1, r2, r2, r3
 80003ce:	1092      	asrs	r2, r2, #2
 80003d0:	17db      	asrs	r3, r3, #31
 80003d2:	1ad4      	subs	r4, r2, r3
 80003d4:	4b42      	ldr	r3, [pc, #264]	; (80004e0 <fsm_automatic_run+0x218>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b44      	ldr	r3, [pc, #272]	; (80004ec <fsm_automatic_run+0x224>)
 80003da:	fb83 1302 	smull	r1, r3, r3, r2
 80003de:	1099      	asrs	r1, r3, #2
 80003e0:	17d3      	asrs	r3, r2, #31
 80003e2:	1ac9      	subs	r1, r1, r3
 80003e4:	460b      	mov	r3, r1
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	1ad1      	subs	r1, r2, r3
 80003ee:	4b3e      	ldr	r3, [pc, #248]	; (80004e8 <fsm_automatic_run+0x220>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a3e      	ldr	r2, [pc, #248]	; (80004ec <fsm_automatic_run+0x224>)
 80003f4:	fb82 0203 	smull	r0, r2, r2, r3
 80003f8:	1092      	asrs	r2, r2, #2
 80003fa:	17db      	asrs	r3, r3, #31
 80003fc:	1ad5      	subs	r5, r2, r3
 80003fe:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <fsm_automatic_run+0x220>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <fsm_automatic_run+0x224>)
 8000404:	fb83 0302 	smull	r0, r3, r3, r2
 8000408:	1098      	asrs	r0, r3, #2
 800040a:	17d3      	asrs	r3, r2, #31
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	4603      	mov	r3, r0
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4403      	add	r3, r0
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1ad0      	subs	r0, r2, r3
 8000418:	4603      	mov	r3, r0
 800041a:	462a      	mov	r2, r5
 800041c:	4620      	mov	r0, r4
 800041e:	f000 ffaf 	bl	8001380 <updateLedBufferVal>
				}
				//next state
				if(is_time_expired(1))
 8000422:	2001      	movs	r0, #1
 8000424:	f001 fa68 	bl	80018f8 <is_time_expired>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d049      	beq.n	80004c2 <fsm_automatic_run+0x1fa>
				{
					status = REDX_YELLOWY_AUTO;
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <fsm_automatic_run+0x210>)
 8000430:	2203      	movs	r2, #3
 8000432:	601a      	str	r2, [r3, #0]
					set_timer(1, (red_timer - green_timer)*1000);
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <fsm_automatic_run+0x214>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <fsm_automatic_run+0x21c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	4619      	mov	r1, r3
 8000448:	2001      	movs	r0, #1
 800044a:	f001 fa35 	bl	80018b8 <set_timer>
					counter1 = red_timer - green_timer;
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <fsm_automatic_run+0x214>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <fsm_automatic_run+0x21c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <fsm_automatic_run+0x218>)
 800045a:	6013      	str	r3, [r2, #0]
					counter2 = yellow_timer;
 800045c:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <fsm_automatic_run+0x228>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <fsm_automatic_run+0x220>)
 8000462:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <fsm_automatic_run+0x218>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <fsm_automatic_run+0x224>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	1092      	asrs	r2, r2, #2
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad4      	subs	r4, r2, r3
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <fsm_automatic_run+0x218>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <fsm_automatic_run+0x224>)
 800047a:	fb83 1302 	smull	r1, r3, r3, r2
 800047e:	1099      	asrs	r1, r3, #2
 8000480:	17d3      	asrs	r3, r2, #31
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	460b      	mov	r3, r1
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	440b      	add	r3, r1
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1ad1      	subs	r1, r2, r3
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <fsm_automatic_run+0x220>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <fsm_automatic_run+0x224>)
 8000494:	fb82 0203 	smull	r0, r2, r2, r3
 8000498:	1092      	asrs	r2, r2, #2
 800049a:	17db      	asrs	r3, r3, #31
 800049c:	1ad5      	subs	r5, r2, r3
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <fsm_automatic_run+0x220>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <fsm_automatic_run+0x224>)
 80004a4:	fb83 0302 	smull	r0, r3, r3, r2
 80004a8:	1098      	asrs	r0, r3, #2
 80004aa:	17d3      	asrs	r3, r2, #31
 80004ac:	1ac0      	subs	r0, r0, r3
 80004ae:	4603      	mov	r3, r0
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4403      	add	r3, r0
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	1ad0      	subs	r0, r2, r3
 80004b8:	4603      	mov	r3, r0
 80004ba:	462a      	mov	r2, r5
 80004bc:	4620      	mov	r0, r4
 80004be:	f000 ff5f 	bl	8001380 <updateLedBufferVal>
				}
				// mode 2
				if(isButtonPressed(0))
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff fe52 	bl	800016c <isButtonPressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 81f8 	beq.w	80008c0 <fsm_automatic_run+0x5f8>
				{
					switchMode2();
 80004d0:	f000 fa0c 	bl	80008ec <switchMode2>
				}

				break;
 80004d4:	e1f4      	b.n	80008c0 <fsm_automatic_run+0x5f8>
 80004d6:	bf00      	nop
 80004d8:	2000010c 	.word	0x2000010c
 80004dc:	20000054 	.word	0x20000054
 80004e0:	20000114 	.word	0x20000114
 80004e4:	2000005c 	.word	0x2000005c
 80004e8:	20000118 	.word	0x20000118
 80004ec:	66666667 	.word	0x66666667
 80004f0:	20000058 	.word	0x20000058

			case REDX_YELLOWY_AUTO:
				displayLed(REDX_YELLOWY);
 80004f4:	2015      	movs	r0, #21
 80004f6:	f000 ff5d 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 80004fa:	2002      	movs	r0, #2
 80004fc:	f001 f9fc 	bl	80018f8 <is_time_expired>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d03d      	beq.n	8000582 <fsm_automatic_run+0x2ba>
				{
					set_timer(2,1000);
 8000506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800050a:	2002      	movs	r0, #2
 800050c:	f001 f9d4 	bl	80018b8 <set_timer>
					counter1--;
 8000510:	4b96      	ldr	r3, [pc, #600]	; (800076c <fsm_automatic_run+0x4a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3b01      	subs	r3, #1
 8000516:	4a95      	ldr	r2, [pc, #596]	; (800076c <fsm_automatic_run+0x4a4>)
 8000518:	6013      	str	r3, [r2, #0]
					counter2--;
 800051a:	4b95      	ldr	r3, [pc, #596]	; (8000770 <fsm_automatic_run+0x4a8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a93      	ldr	r2, [pc, #588]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000522:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 8000524:	4b91      	ldr	r3, [pc, #580]	; (800076c <fsm_automatic_run+0x4a4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a92      	ldr	r2, [pc, #584]	; (8000774 <fsm_automatic_run+0x4ac>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1092      	asrs	r2, r2, #2
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad4      	subs	r4, r2, r3
 8000534:	4b8d      	ldr	r3, [pc, #564]	; (800076c <fsm_automatic_run+0x4a4>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b8e      	ldr	r3, [pc, #568]	; (8000774 <fsm_automatic_run+0x4ac>)
 800053a:	fb83 1302 	smull	r1, r3, r3, r2
 800053e:	1099      	asrs	r1, r3, #2
 8000540:	17d3      	asrs	r3, r2, #31
 8000542:	1ac9      	subs	r1, r1, r3
 8000544:	460b      	mov	r3, r1
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	440b      	add	r3, r1
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	1ad1      	subs	r1, r2, r3
 800054e:	4b88      	ldr	r3, [pc, #544]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a88      	ldr	r2, [pc, #544]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000554:	fb82 0203 	smull	r0, r2, r2, r3
 8000558:	1092      	asrs	r2, r2, #2
 800055a:	17db      	asrs	r3, r3, #31
 800055c:	1ad5      	subs	r5, r2, r3
 800055e:	4b84      	ldr	r3, [pc, #528]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b84      	ldr	r3, [pc, #528]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000564:	fb83 0302 	smull	r0, r3, r3, r2
 8000568:	1098      	asrs	r0, r3, #2
 800056a:	17d3      	asrs	r3, r2, #31
 800056c:	1ac0      	subs	r0, r0, r3
 800056e:	4603      	mov	r3, r0
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4403      	add	r3, r0
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	1ad0      	subs	r0, r2, r3
 8000578:	4603      	mov	r3, r0
 800057a:	462a      	mov	r2, r5
 800057c:	4620      	mov	r0, r4
 800057e:	f000 feff 	bl	8001380 <updateLedBufferVal>
				}
				// next state
				if(is_time_expired(1))
 8000582:	2001      	movs	r0, #1
 8000584:	f001 f9b8 	bl	80018f8 <is_time_expired>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d043      	beq.n	8000616 <fsm_automatic_run+0x34e>
				{
					status = GREENX_REDY_AUTO;
 800058e:	4b7a      	ldr	r3, [pc, #488]	; (8000778 <fsm_automatic_run+0x4b0>)
 8000590:	2204      	movs	r2, #4
 8000592:	601a      	str	r2, [r3, #0]
					set_timer(1, green_timer*1000);
 8000594:	4b79      	ldr	r3, [pc, #484]	; (800077c <fsm_automatic_run+0x4b4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 f988 	bl	80018b8 <set_timer>
					counter1 = red_timer;
 80005a8:	4b75      	ldr	r3, [pc, #468]	; (8000780 <fsm_automatic_run+0x4b8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a6f      	ldr	r2, [pc, #444]	; (800076c <fsm_automatic_run+0x4a4>)
 80005ae:	6013      	str	r3, [r2, #0]
					counter2 = green_timer;
 80005b0:	4b72      	ldr	r3, [pc, #456]	; (800077c <fsm_automatic_run+0x4b4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a6e      	ldr	r2, [pc, #440]	; (8000770 <fsm_automatic_run+0x4a8>)
 80005b6:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80005b8:	4b6c      	ldr	r3, [pc, #432]	; (800076c <fsm_automatic_run+0x4a4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a6d      	ldr	r2, [pc, #436]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005be:	fb82 1203 	smull	r1, r2, r2, r3
 80005c2:	1092      	asrs	r2, r2, #2
 80005c4:	17db      	asrs	r3, r3, #31
 80005c6:	1ad4      	subs	r4, r2, r3
 80005c8:	4b68      	ldr	r3, [pc, #416]	; (800076c <fsm_automatic_run+0x4a4>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b69      	ldr	r3, [pc, #420]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005ce:	fb83 1302 	smull	r1, r3, r3, r2
 80005d2:	1099      	asrs	r1, r3, #2
 80005d4:	17d3      	asrs	r3, r2, #31
 80005d6:	1ac9      	subs	r1, r1, r3
 80005d8:	460b      	mov	r3, r1
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	440b      	add	r3, r1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1ad1      	subs	r1, r2, r3
 80005e2:	4b63      	ldr	r3, [pc, #396]	; (8000770 <fsm_automatic_run+0x4a8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a63      	ldr	r2, [pc, #396]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005e8:	fb82 0203 	smull	r0, r2, r2, r3
 80005ec:	1092      	asrs	r2, r2, #2
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad5      	subs	r5, r2, r3
 80005f2:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <fsm_automatic_run+0x4a8>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b5f      	ldr	r3, [pc, #380]	; (8000774 <fsm_automatic_run+0x4ac>)
 80005f8:	fb83 0302 	smull	r0, r3, r3, r2
 80005fc:	1098      	asrs	r0, r3, #2
 80005fe:	17d3      	asrs	r3, r2, #31
 8000600:	1ac0      	subs	r0, r0, r3
 8000602:	4603      	mov	r3, r0
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4403      	add	r3, r0
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	1ad0      	subs	r0, r2, r3
 800060c:	4603      	mov	r3, r0
 800060e:	462a      	mov	r2, r5
 8000610:	4620      	mov	r0, r4
 8000612:	f000 feb5 	bl	8001380 <updateLedBufferVal>
				}
				//mode 2
				if(isButtonPressed(0))
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fda8 	bl	800016c <isButtonPressed>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 8150 	beq.w	80008c4 <fsm_automatic_run+0x5fc>
				{
					switchMode2();
 8000624:	f000 f962 	bl	80008ec <switchMode2>
				}
				break;
 8000628:	e14c      	b.n	80008c4 <fsm_automatic_run+0x5fc>
			case GREENX_REDY_AUTO:
				displayLed(GREENX_REDY);
 800062a:	2016      	movs	r0, #22
 800062c:	f000 fec2 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000630:	2002      	movs	r0, #2
 8000632:	f001 f961 	bl	80018f8 <is_time_expired>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d03d      	beq.n	80006b8 <fsm_automatic_run+0x3f0>
				{
					set_timer(2,1000);
 800063c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000640:	2002      	movs	r0, #2
 8000642:	f001 f939 	bl	80018b8 <set_timer>
					counter1--;
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <fsm_automatic_run+0x4a4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a47      	ldr	r2, [pc, #284]	; (800076c <fsm_automatic_run+0x4a4>)
 800064e:	6013      	str	r3, [r2, #0]
					counter2--;
 8000650:	4b47      	ldr	r3, [pc, #284]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000658:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <fsm_automatic_run+0x4a4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a45      	ldr	r2, [pc, #276]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000660:	fb82 1203 	smull	r1, r2, r2, r3
 8000664:	1092      	asrs	r2, r2, #2
 8000666:	17db      	asrs	r3, r3, #31
 8000668:	1ad4      	subs	r4, r2, r3
 800066a:	4b40      	ldr	r3, [pc, #256]	; (800076c <fsm_automatic_run+0x4a4>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b41      	ldr	r3, [pc, #260]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000670:	fb83 1302 	smull	r1, r3, r3, r2
 8000674:	1099      	asrs	r1, r3, #2
 8000676:	17d3      	asrs	r3, r2, #31
 8000678:	1ac9      	subs	r1, r1, r3
 800067a:	460b      	mov	r3, r1
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	1ad1      	subs	r1, r2, r3
 8000684:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a3a      	ldr	r2, [pc, #232]	; (8000774 <fsm_automatic_run+0x4ac>)
 800068a:	fb82 0203 	smull	r0, r2, r2, r3
 800068e:	1092      	asrs	r2, r2, #2
 8000690:	17db      	asrs	r3, r3, #31
 8000692:	1ad5      	subs	r5, r2, r3
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <fsm_automatic_run+0x4ac>)
 800069a:	fb83 0302 	smull	r0, r3, r3, r2
 800069e:	1098      	asrs	r0, r3, #2
 80006a0:	17d3      	asrs	r3, r2, #31
 80006a2:	1ac0      	subs	r0, r0, r3
 80006a4:	4603      	mov	r3, r0
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4403      	add	r3, r0
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1ad0      	subs	r0, r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	462a      	mov	r2, r5
 80006b2:	4620      	mov	r0, r4
 80006b4:	f000 fe64 	bl	8001380 <updateLedBufferVal>
				}
				// next state
				if(is_time_expired(1))
 80006b8:	2001      	movs	r0, #1
 80006ba:	f001 f91d 	bl	80018f8 <is_time_expired>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d049      	beq.n	8000758 <fsm_automatic_run+0x490>
				{
					status = YELLOWX_REDY_AUTO;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <fsm_automatic_run+0x4b0>)
 80006c6:	2205      	movs	r2, #5
 80006c8:	601a      	str	r2, [r3, #0]
					set_timer(1, (red_timer - green_timer)*1000);
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <fsm_automatic_run+0x4b8>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b2b      	ldr	r3, [pc, #172]	; (800077c <fsm_automatic_run+0x4b4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 f8ea 	bl	80018b8 <set_timer>
					counter1 = red_timer - green_timer;
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <fsm_automatic_run+0x4b8>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <fsm_automatic_run+0x4b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <fsm_automatic_run+0x4a4>)
 80006f0:	6013      	str	r3, [r2, #0]
					counter2 = yellow_timer;
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <fsm_automatic_run+0x4bc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <fsm_automatic_run+0x4a8>)
 80006f8:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <fsm_automatic_run+0x4a4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1092      	asrs	r2, r2, #2
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad4      	subs	r4, r2, r3
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <fsm_automatic_run+0x4a4>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <fsm_automatic_run+0x4ac>)
 8000710:	fb83 1302 	smull	r1, r3, r3, r2
 8000714:	1099      	asrs	r1, r3, #2
 8000716:	17d3      	asrs	r3, r2, #31
 8000718:	1ac9      	subs	r1, r1, r3
 800071a:	460b      	mov	r3, r1
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	1ad1      	subs	r1, r2, r3
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <fsm_automatic_run+0x4ac>)
 800072a:	fb82 0203 	smull	r0, r2, r2, r3
 800072e:	1092      	asrs	r2, r2, #2
 8000730:	17db      	asrs	r3, r3, #31
 8000732:	1ad5      	subs	r5, r2, r3
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <fsm_automatic_run+0x4a8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <fsm_automatic_run+0x4ac>)
 800073a:	fb83 0302 	smull	r0, r3, r3, r2
 800073e:	1098      	asrs	r0, r3, #2
 8000740:	17d3      	asrs	r3, r2, #31
 8000742:	1ac0      	subs	r0, r0, r3
 8000744:	4603      	mov	r3, r0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4403      	add	r3, r0
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	1ad0      	subs	r0, r2, r3
 800074e:	4603      	mov	r3, r0
 8000750:	462a      	mov	r2, r5
 8000752:	4620      	mov	r0, r4
 8000754:	f000 fe14 	bl	8001380 <updateLedBufferVal>
				}
				//mode 2
				if(isButtonPressed(0))
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fd07 	bl	800016c <isButtonPressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	f000 80b1 	beq.w	80008c8 <fsm_automatic_run+0x600>
				{
					switchMode2();
 8000766:	f000 f8c1 	bl	80008ec <switchMode2>
				}
				break;
 800076a:	e0ad      	b.n	80008c8 <fsm_automatic_run+0x600>
 800076c:	20000114 	.word	0x20000114
 8000770:	20000118 	.word	0x20000118
 8000774:	66666667 	.word	0x66666667
 8000778:	2000010c 	.word	0x2000010c
 800077c:	2000005c 	.word	0x2000005c
 8000780:	20000054 	.word	0x20000054
 8000784:	20000058 	.word	0x20000058

			case YELLOWX_REDY_AUTO:
				displayLed(YELLOWX_REDY);
 8000788:	2017      	movs	r0, #23
 800078a:	f000 fe13 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 800078e:	2002      	movs	r0, #2
 8000790:	f001 f8b2 	bl	80018f8 <is_time_expired>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d03d      	beq.n	8000816 <fsm_automatic_run+0x54e>
				{
					set_timer(2,1000);
 800079a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800079e:	2002      	movs	r0, #2
 80007a0:	f001 f88a 	bl	80018b8 <set_timer>
					counter1--;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007ac:	6013      	str	r3, [r2, #0]
					counter2--;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <fsm_automatic_run+0x610>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	4a48      	ldr	r2, [pc, #288]	; (80008d8 <fsm_automatic_run+0x610>)
 80007b6:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 80007b8:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a47      	ldr	r2, [pc, #284]	; (80008dc <fsm_automatic_run+0x614>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad4      	subs	r4, r2, r3
 80007c8:	4b42      	ldr	r3, [pc, #264]	; (80008d4 <fsm_automatic_run+0x60c>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b43      	ldr	r3, [pc, #268]	; (80008dc <fsm_automatic_run+0x614>)
 80007ce:	fb83 1302 	smull	r1, r3, r3, r2
 80007d2:	1099      	asrs	r1, r3, #2
 80007d4:	17d3      	asrs	r3, r2, #31
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	440b      	add	r3, r1
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	1ad1      	subs	r1, r2, r3
 80007e2:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <fsm_automatic_run+0x610>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a3d      	ldr	r2, [pc, #244]	; (80008dc <fsm_automatic_run+0x614>)
 80007e8:	fb82 0203 	smull	r0, r2, r2, r3
 80007ec:	1092      	asrs	r2, r2, #2
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1ad5      	subs	r5, r2, r3
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <fsm_automatic_run+0x610>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <fsm_automatic_run+0x614>)
 80007f8:	fb83 0302 	smull	r0, r3, r3, r2
 80007fc:	1098      	asrs	r0, r3, #2
 80007fe:	17d3      	asrs	r3, r2, #31
 8000800:	1ac0      	subs	r0, r0, r3
 8000802:	4603      	mov	r3, r0
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4403      	add	r3, r0
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	1ad0      	subs	r0, r2, r3
 800080c:	4603      	mov	r3, r0
 800080e:	462a      	mov	r2, r5
 8000810:	4620      	mov	r0, r4
 8000812:	f000 fdb5 	bl	8001380 <updateLedBufferVal>
				}
				// next state
				if(is_time_expired(1))
 8000816:	2001      	movs	r0, #1
 8000818:	f001 f86e 	bl	80018f8 <is_time_expired>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d043      	beq.n	80008aa <fsm_automatic_run+0x5e2>
				{
					status = REDX_GREENY_AUTO;
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <fsm_automatic_run+0x618>)
 8000824:	2202      	movs	r2, #2
 8000826:	601a      	str	r2, [r3, #0]
					set_timer(1, green_timer*1000);
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <fsm_automatic_run+0x61c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	4619      	mov	r1, r3
 8000836:	2001      	movs	r0, #1
 8000838:	f001 f83e 	bl	80018b8 <set_timer>
					counter1 = red_timer;
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <fsm_automatic_run+0x620>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <fsm_automatic_run+0x60c>)
 8000842:	6013      	str	r3, [r2, #0]
					counter2 = green_timer;
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <fsm_automatic_run+0x61c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <fsm_automatic_run+0x610>)
 800084a:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(counter1/10, counter1%10, counter2/10, counter2%10);
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <fsm_automatic_run+0x60c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <fsm_automatic_run+0x614>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad4      	subs	r4, r2, r3
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <fsm_automatic_run+0x60c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <fsm_automatic_run+0x614>)
 8000862:	fb83 1302 	smull	r1, r3, r3, r2
 8000866:	1099      	asrs	r1, r3, #2
 8000868:	17d3      	asrs	r3, r2, #31
 800086a:	1ac9      	subs	r1, r1, r3
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	1ad1      	subs	r1, r2, r3
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <fsm_automatic_run+0x610>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <fsm_automatic_run+0x614>)
 800087c:	fb82 0203 	smull	r0, r2, r2, r3
 8000880:	1092      	asrs	r2, r2, #2
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad5      	subs	r5, r2, r3
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <fsm_automatic_run+0x610>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <fsm_automatic_run+0x614>)
 800088c:	fb83 0302 	smull	r0, r3, r3, r2
 8000890:	1098      	asrs	r0, r3, #2
 8000892:	17d3      	asrs	r3, r2, #31
 8000894:	1ac0      	subs	r0, r0, r3
 8000896:	4603      	mov	r3, r0
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4403      	add	r3, r0
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	1ad0      	subs	r0, r2, r3
 80008a0:	4603      	mov	r3, r0
 80008a2:	462a      	mov	r2, r5
 80008a4:	4620      	mov	r0, r4
 80008a6:	f000 fd6b 	bl	8001380 <updateLedBufferVal>

				}
				//mode 2
				if(isButtonPressed(0))
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fc5e 	bl	800016c <isButtonPressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00a      	beq.n	80008cc <fsm_automatic_run+0x604>
				{
					switchMode2();
 80008b6:	f000 f819 	bl	80008ec <switchMode2>
				}
				break;
 80008ba:	e007      	b.n	80008cc <fsm_automatic_run+0x604>

			default : break;
 80008bc:	bf00      	nop
 80008be:	e006      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008c0:	bf00      	nop
 80008c2:	e004      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008c4:	bf00      	nop
 80008c6:	e002      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008c8:	bf00      	nop
 80008ca:	e000      	b.n	80008ce <fsm_automatic_run+0x606>
				break;
 80008cc:	bf00      	nop
		}
	}
 80008ce:	bf00      	nop
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000114 	.word	0x20000114
 80008d8:	20000118 	.word	0x20000118
 80008dc:	66666667 	.word	0x66666667
 80008e0:	2000010c 	.word	0x2000010c
 80008e4:	2000005c 	.word	0x2000005c
 80008e8:	20000054 	.word	0x20000054

080008ec <switchMode2>:


#include"fsm_manual.h"
	int timer_man = 0;
	void switchMode2()
		{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
			status = RED_MAN;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <switchMode2+0x68>)
 80008f2:	220a      	movs	r2, #10
 80008f4:	601a      	str	r2, [r3, #0]
			counter1 = red_timer;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <switchMode2+0x6c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <switchMode2+0x70>)
 80008fc:	6013      	str	r3, [r2, #0]
			set_timer(2,1000);
 80008fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000902:	2002      	movs	r0, #2
 8000904:	f000 ffd8 	bl	80018b8 <set_timer>
			set_timer(4,250);
 8000908:	21fa      	movs	r1, #250	; 0xfa
 800090a:	2004      	movs	r0, #4
 800090c:	f000 ffd4 	bl	80018b8 <set_timer>
			updateLedBufferVal(counter1/10,counter1%10, counter1/10, 2);
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <switchMode2+0x70>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <switchMode2+0x74>)
 8000916:	fb82 1203 	smull	r1, r2, r2, r3
 800091a:	1092      	asrs	r2, r2, #2
 800091c:	17db      	asrs	r3, r3, #31
 800091e:	1ad0      	subs	r0, r2, r3
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <switchMode2+0x70>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <switchMode2+0x74>)
 8000926:	fb83 1302 	smull	r1, r3, r3, r2
 800092a:	1099      	asrs	r1, r3, #2
 800092c:	17d3      	asrs	r3, r2, #31
 800092e:	1ac9      	subs	r1, r1, r3
 8000930:	460b      	mov	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	1ad1      	subs	r1, r2, r3
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <switchMode2+0x70>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <switchMode2+0x74>)
 8000940:	fb82 c203 	smull	ip, r2, r2, r3
 8000944:	1092      	asrs	r2, r2, #2
 8000946:	17db      	asrs	r3, r3, #31
 8000948:	1ad2      	subs	r2, r2, r3
 800094a:	2302      	movs	r3, #2
 800094c:	f000 fd18 	bl	8001380 <updateLedBufferVal>
		}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000010c 	.word	0x2000010c
 8000958:	20000054 	.word	0x20000054
 800095c:	20000114 	.word	0x20000114
 8000960:	66666667 	.word	0x66666667

08000964 <switchMode3>:

	void switchMode3()
		{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
			status = YELLOW_MAN;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <switchMode3+0x68>)
 800096a:	220b      	movs	r2, #11
 800096c:	601a      	str	r2, [r3, #0]
			counter1 = yellow_timer;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <switchMode3+0x6c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <switchMode3+0x70>)
 8000974:	6013      	str	r3, [r2, #0]
			set_timer(2,1000);
 8000976:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800097a:	2002      	movs	r0, #2
 800097c:	f000 ff9c 	bl	80018b8 <set_timer>
			set_timer(4,250);
 8000980:	21fa      	movs	r1, #250	; 0xfa
 8000982:	2004      	movs	r0, #4
 8000984:	f000 ff98 	bl	80018b8 <set_timer>
			updateLedBufferVal(counter1/10, counter1%10, counter1/10, 3);
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <switchMode3+0x70>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <switchMode3+0x74>)
 800098e:	fb82 1203 	smull	r1, r2, r2, r3
 8000992:	1092      	asrs	r2, r2, #2
 8000994:	17db      	asrs	r3, r3, #31
 8000996:	1ad0      	subs	r0, r2, r3
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <switchMode3+0x70>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <switchMode3+0x74>)
 800099e:	fb83 1302 	smull	r1, r3, r3, r2
 80009a2:	1099      	asrs	r1, r3, #2
 80009a4:	17d3      	asrs	r3, r2, #31
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	1ad1      	subs	r1, r2, r3
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <switchMode3+0x70>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <switchMode3+0x74>)
 80009b8:	fb82 c203 	smull	ip, r2, r2, r3
 80009bc:	1092      	asrs	r2, r2, #2
 80009be:	17db      	asrs	r3, r3, #31
 80009c0:	1ad2      	subs	r2, r2, r3
 80009c2:	2303      	movs	r3, #3
 80009c4:	f000 fcdc 	bl	8001380 <updateLedBufferVal>
		}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000010c 	.word	0x2000010c
 80009d0:	20000058 	.word	0x20000058
 80009d4:	20000114 	.word	0x20000114
 80009d8:	66666667 	.word	0x66666667

080009dc <switchMode4>:
	void switchMode4()
		{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
			status = GREEN_MAN;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <switchMode4+0x68>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
			counter1 = green_timer;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <switchMode4+0x6c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <switchMode4+0x70>)
 80009ec:	6013      	str	r3, [r2, #0]
			set_timer(2,1000);
 80009ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f2:	2002      	movs	r0, #2
 80009f4:	f000 ff60 	bl	80018b8 <set_timer>
			set_timer(4,250);
 80009f8:	21fa      	movs	r1, #250	; 0xfa
 80009fa:	2004      	movs	r0, #4
 80009fc:	f000 ff5c 	bl	80018b8 <set_timer>
			updateLedBufferVal(counter1/10, counter1%10, counter1/10, 4);
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <switchMode4+0x70>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <switchMode4+0x74>)
 8000a06:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0a:	1092      	asrs	r2, r2, #2
 8000a0c:	17db      	asrs	r3, r3, #31
 8000a0e:	1ad0      	subs	r0, r2, r3
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <switchMode4+0x70>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <switchMode4+0x74>)
 8000a16:	fb83 1302 	smull	r1, r3, r3, r2
 8000a1a:	1099      	asrs	r1, r3, #2
 8000a1c:	17d3      	asrs	r3, r2, #31
 8000a1e:	1ac9      	subs	r1, r1, r3
 8000a20:	460b      	mov	r3, r1
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	1ad1      	subs	r1, r2, r3
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <switchMode4+0x70>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <switchMode4+0x74>)
 8000a30:	fb82 c203 	smull	ip, r2, r2, r3
 8000a34:	1092      	asrs	r2, r2, #2
 8000a36:	17db      	asrs	r3, r3, #31
 8000a38:	1ad2      	subs	r2, r2, r3
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	f000 fca0 	bl	8001380 <updateLedBufferVal>
		}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000010c 	.word	0x2000010c
 8000a48:	2000005c 	.word	0x2000005c
 8000a4c:	20000114 	.word	0x20000114
 8000a50:	66666667 	.word	0x66666667

08000a54 <fsm_manual_run>:

	void fsm_manual_run()
	{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
		switch(status)
 8000a58:	4baf      	ldr	r3, [pc, #700]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b0a      	subs	r3, #10
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	f200 8208 	bhi.w	8000e74 <fsm_manual_run+0x420>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <fsm_manual_run+0x18>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a85 	.word	0x08000a85
 8000a70:	08000bd5 	.word	0x08000bd5
 8000a74:	08000d35 	.word	0x08000d35
 8000a78:	08000b41 	.word	0x08000b41
 8000a7c:	08000c83 	.word	0x08000c83
 8000a80:	08000de3 	.word	0x08000de3
		{
			case RED_MAN:
				displayLed(RED_MAN);
 8000a84:	200a      	movs	r0, #10
 8000a86:	f000 fc95 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f000 ff34 	bl	80018f8 <is_time_expired>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d024      	beq.n	8000ae0 <fsm_manual_run+0x8c>
				{
					set_timer(2, 1000);
 8000a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 ff0c 	bl	80018b8 <set_timer>
					updateLedBufferVal(counter1/10, counter1%10, counter1/10, 2);
 8000aa0:	4b9e      	ldr	r3, [pc, #632]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a9e      	ldr	r2, [pc, #632]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aaa:	1092      	asrs	r2, r2, #2
 8000aac:	17db      	asrs	r3, r3, #31
 8000aae:	1ad0      	subs	r0, r2, r3
 8000ab0:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b9a      	ldr	r3, [pc, #616]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000ab6:	fb83 1302 	smull	r1, r3, r3, r2
 8000aba:	1099      	asrs	r1, r3, #2
 8000abc:	17d3      	asrs	r3, r2, #31
 8000abe:	1ac9      	subs	r1, r1, r3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	1ad1      	subs	r1, r2, r3
 8000aca:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000ad0:	fb82 c203 	smull	ip, r2, r2, r3
 8000ad4:	1092      	asrs	r2, r2, #2
 8000ad6:	17db      	asrs	r3, r3, #31
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	2302      	movs	r3, #2
 8000adc:	f000 fc50 	bl	8001380 <updateLedBufferVal>
				}
				//mode 3
				if(isButtonPressed(0))
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fb43 	bl	800016c <isButtonPressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <fsm_manual_run+0x9c>
				{
					switchMode3();
 8000aec:	f7ff ff3a 	bl	8000964 <switchMode3>
				}
				// next state
				if(isButtonPressed(1))
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fb3b 	bl	800016c <isButtonPressed>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 81bd 	beq.w	8000e78 <fsm_manual_run+0x424>
				{
					status = RED_MAN_MODIFY;
 8000afe:	4b86      	ldr	r3, [pc, #536]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000b00:	220d      	movs	r2, #13
 8000b02:	601a      	str	r2, [r3, #0]
					timer_man = red_timer;
 8000b04:	4b87      	ldr	r3, [pc, #540]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a87      	ldr	r2, [pc, #540]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b0a:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 2);
 8000b0c:	4b86      	ldr	r3, [pc, #536]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a83      	ldr	r2, [pc, #524]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1092      	asrs	r2, r2, #2
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad0      	subs	r0, r2, r3
 8000b1c:	4b82      	ldr	r3, [pc, #520]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b7f      	ldr	r3, [pc, #508]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b22:	fb83 1302 	smull	r1, r3, r3, r2
 8000b26:	1099      	asrs	r1, r3, #2
 8000b28:	17d3      	asrs	r3, r2, #31
 8000b2a:	1ac9      	subs	r1, r1, r3
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1ad1      	subs	r1, r2, r3
 8000b36:	2302      	movs	r3, #2
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f000 fc21 	bl	8001380 <updateLedBufferVal>
				}
				break;
 8000b3e:	e19b      	b.n	8000e78 <fsm_manual_run+0x424>

			case RED_MAN_MODIFY:
				displayLed(RED_MAN);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 fc37 	bl	80013b4 <displayLed>
				// back mode 2
				if(isButtonPressed(0))
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fb10 	bl	800016c <isButtonPressed>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <fsm_manual_run+0x104>
				{
					status = RED_MAN;
 8000b52:	4b71      	ldr	r3, [pc, #452]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	601a      	str	r2, [r3, #0]
				}
				// modify
				if(isButtonPressed(1))
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fb07 	bl	800016c <isButtonPressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d024      	beq.n	8000bae <fsm_manual_run+0x15a>
				{
					timer_man++;
 8000b64:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a6f      	ldr	r2, [pc, #444]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b6c:	6013      	str	r3, [r2, #0]
					if(timer_man > 99) timer_man = 1;
 8000b6e:	4b6e      	ldr	r3, [pc, #440]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b63      	cmp	r3, #99	; 0x63
 8000b74:	dd02      	ble.n	8000b7c <fsm_manual_run+0x128>
 8000b76:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 2);
 8000b7c:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a67      	ldr	r2, [pc, #412]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1092      	asrs	r2, r2, #2
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad0      	subs	r0, r2, r3
 8000b8c:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b63      	ldr	r3, [pc, #396]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000b92:	fb83 1302 	smull	r1, r3, r3, r2
 8000b96:	1099      	asrs	r1, r3, #2
 8000b98:	17d3      	asrs	r3, r2, #31
 8000b9a:	1ac9      	subs	r1, r1, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad1      	subs	r1, r2, r3
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f000 fbe9 	bl	8001380 <updateLedBufferVal>
				}
				// save value
				if(isButtonPressed(2))
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff fadc 	bl	800016c <isButtonPressed>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8160 	beq.w	8000e7c <fsm_manual_run+0x428>
				{
					red_timer = timer_man;
 8000bbc:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a58      	ldr	r2, [pc, #352]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000bc2:	6013      	str	r3, [r2, #0]
					green_timer = red_timer - yellow_timer;
 8000bc4:	4b57      	ldr	r3, [pc, #348]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <fsm_manual_run+0x2dc>)
 8000bd0:	6013      	str	r3, [r2, #0]

				}
				break;
 8000bd2:	e153      	b.n	8000e7c <fsm_manual_run+0x428>

			case YELLOW_MAN:
				displayLed(YELLOW_MAN);
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f000 fbed 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f000 fe8c 	bl	80018f8 <is_time_expired>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01d      	beq.n	8000c22 <fsm_manual_run+0x1ce>
				{
					set_timer(2, 1000);
 8000be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bea:	2002      	movs	r0, #2
 8000bec:	f000 fe64 	bl	80018b8 <set_timer>
					updateLedBufferVal(counter1/10, counter1%10, 0, 3);
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfa:	1092      	asrs	r2, r2, #2
 8000bfc:	17db      	asrs	r3, r3, #31
 8000bfe:	1ad0      	subs	r0, r2, r3
 8000c00:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <fsm_manual_run+0x2c8>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000c06:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0a:	1099      	asrs	r1, r3, #2
 8000c0c:	17d3      	asrs	r3, r2, #31
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1ad1      	subs	r1, r2, r3
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f000 fbaf 	bl	8001380 <updateLedBufferVal>
				}
				// mode 4
				if(isButtonPressed(0))
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff faa2 	bl	800016c <isButtonPressed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <fsm_manual_run+0x1de>
				{
					switchMode4();
 8000c2e:	f7ff fed5 	bl	80009dc <switchMode4>
				}
				//next state
				if(isButtonPressed(1))
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fa9a 	bl	800016c <isButtonPressed>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8120 	beq.w	8000e80 <fsm_manual_run+0x42c>
				{
					status = YELLOW_MAN_MODIFY;
 8000c40:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000c42:	220e      	movs	r2, #14
 8000c44:	601a      	str	r2, [r3, #0]
					timer_man = yellow_timer;
 8000c46:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000c4c:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 3);
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1092      	asrs	r2, r2, #2
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad0      	subs	r0, r2, r3
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000c64:	fb83 1302 	smull	r1, r3, r3, r2
 8000c68:	1099      	asrs	r1, r3, #2
 8000c6a:	17d3      	asrs	r3, r2, #31
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	460b      	mov	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	1ad1      	subs	r1, r2, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f000 fb80 	bl	8001380 <updateLedBufferVal>
				}
				break;
 8000c80:	e0fe      	b.n	8000e80 <fsm_manual_run+0x42c>

			case YELLOW_MAN_MODIFY:
				displayLed(YELLOW_MAN);
 8000c82:	200b      	movs	r0, #11
 8000c84:	f000 fb96 	bl	80013b4 <displayLed>
				//back mode 3
				if(isButtonPressed(0))
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fa6f 	bl	800016c <isButtonPressed>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <fsm_manual_run+0x246>
				{
					status = YELLOW_MAN;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <fsm_manual_run+0x2c4>)
 8000c96:	220b      	movs	r2, #11
 8000c98:	601a      	str	r2, [r3, #0]
				}
				// modify
				if(isButtonPressed(1))
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fa66 	bl	800016c <isButtonPressed>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d024      	beq.n	8000cf0 <fsm_manual_run+0x29c>
				{
					timer_man++;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cae:	6013      	str	r3, [r2, #0]
					if(timer_man > 99) timer_man = 1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b63      	cmp	r3, #99	; 0x63
 8000cb6:	dd02      	ble.n	8000cbe <fsm_manual_run+0x26a>
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 3);
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1092      	asrs	r2, r2, #2
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad0      	subs	r0, r2, r3
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <fsm_manual_run+0x2cc>)
 8000cd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd8:	1099      	asrs	r1, r3, #2
 8000cda:	17d3      	asrs	r3, r2, #31
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	1ad1      	subs	r1, r2, r3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	2200      	movs	r2, #0
 8000cec:	f000 fb48 	bl	8001380 <updateLedBufferVal>
				}
				// save value
				if(isButtonPressed(2))
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f7ff fa3b 	bl	800016c <isButtonPressed>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 80c3 	beq.w	8000e84 <fsm_manual_run+0x430>
				{
					yellow_timer = timer_man;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <fsm_manual_run+0x2d4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000d04:	6013      	str	r3, [r2, #0]
					green_timer = red_timer - yellow_timer;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <fsm_manual_run+0x2d0>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <fsm_manual_run+0x2d8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <fsm_manual_run+0x2dc>)
 8000d12:	6013      	str	r3, [r2, #0]
				}
				break;
 8000d14:	e0b6      	b.n	8000e84 <fsm_manual_run+0x430>
 8000d16:	bf00      	nop
 8000d18:	2000010c 	.word	0x2000010c
 8000d1c:	20000114 	.word	0x20000114
 8000d20:	66666667 	.word	0x66666667
 8000d24:	20000054 	.word	0x20000054
 8000d28:	20000108 	.word	0x20000108
 8000d2c:	20000058 	.word	0x20000058
 8000d30:	2000005c 	.word	0x2000005c

			case GREEN_MAN:
				displayLed(GREEN_MAN);
 8000d34:	200c      	movs	r0, #12
 8000d36:	f000 fb3d 	bl	80013b4 <displayLed>
				// reset after 1s
				if(is_time_expired(2))
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f000 fddc 	bl	80018f8 <is_time_expired>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01d      	beq.n	8000d82 <fsm_manual_run+0x32e>
				{
					set_timer(2, 1000);
 8000d46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 fdb4 	bl	80018b8 <set_timer>
					updateLedBufferVal(counter1/10, counter1%10, 0, 4);
 8000d50:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <fsm_manual_run+0x440>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <fsm_manual_run+0x444>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	1092      	asrs	r2, r2, #2
 8000d5c:	17db      	asrs	r3, r3, #31
 8000d5e:	1ad0      	subs	r0, r2, r3
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <fsm_manual_run+0x440>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <fsm_manual_run+0x444>)
 8000d66:	fb83 1302 	smull	r1, r3, r3, r2
 8000d6a:	1099      	asrs	r1, r3, #2
 8000d6c:	17d3      	asrs	r3, r2, #31
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f000 faff 	bl	8001380 <updateLedBufferVal>
				}
				// mode INIT
				if(isButtonPressed(0))
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff f9f2 	bl	800016c <isButtonPressed>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <fsm_manual_run+0x340>
				{
					status = INIT;
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <fsm_manual_run+0x448>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
				}
				// next state
				if(isButtonPressed(1))
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff f9e9 	bl	800016c <isButtonPressed>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d073      	beq.n	8000e88 <fsm_manual_run+0x434>
				{
					status = GREEN_MAN_MODIFY;
 8000da0:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <fsm_manual_run+0x448>)
 8000da2:	220f      	movs	r2, #15
 8000da4:	601a      	str	r2, [r3, #0]
					timer_man = green_timer;
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <fsm_manual_run+0x44c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a3e      	ldr	r2, [pc, #248]	; (8000ea4 <fsm_manual_run+0x450>)
 8000dac:	6013      	str	r3, [r2, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 4);
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <fsm_manual_run+0x450>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a39      	ldr	r2, [pc, #228]	; (8000e98 <fsm_manual_run+0x444>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1092      	asrs	r2, r2, #2
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad0      	subs	r0, r2, r3
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <fsm_manual_run+0x450>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <fsm_manual_run+0x444>)
 8000dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc8:	1099      	asrs	r1, r3, #2
 8000dca:	17d3      	asrs	r3, r2, #31
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad1      	subs	r1, r2, r3
 8000dd8:	2304      	movs	r3, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f000 fad0 	bl	8001380 <updateLedBufferVal>
				}
				break;
 8000de0:	e052      	b.n	8000e88 <fsm_manual_run+0x434>

			case GREEN_MAN_MODIFY:
				displayLed(GREEN_MAN);
 8000de2:	200c      	movs	r0, #12
 8000de4:	f000 fae6 	bl	80013b4 <displayLed>
				//back mode 4
				if(isButtonPressed(0))
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff f9bf 	bl	800016c <isButtonPressed>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <fsm_manual_run+0x3a6>
				{
					status = GREEN_MAN;
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <fsm_manual_run+0x448>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
				}
				//modify
				if(isButtonPressed(1))
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff f9b6 	bl	800016c <isButtonPressed>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d024      	beq.n	8000e50 <fsm_manual_run+0x3fc>
				{
					timer_man++;
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e0e:	6013      	str	r3, [r2, #0]
					if(timer_man > 99) timer_man = 1;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b63      	cmp	r3, #99	; 0x63
 8000e16:	dd02      	ble.n	8000e1e <fsm_manual_run+0x3ca>
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
					updateLedBufferVal(timer_man/10, timer_man%10, 0, 4);
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <fsm_manual_run+0x444>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1092      	asrs	r2, r2, #2
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad0      	subs	r0, r2, r3
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <fsm_manual_run+0x444>)
 8000e34:	fb83 1302 	smull	r1, r3, r3, r2
 8000e38:	1099      	asrs	r1, r3, #2
 8000e3a:	17d3      	asrs	r3, r2, #31
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	1ad1      	subs	r1, r2, r3
 8000e48:	2304      	movs	r3, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f000 fa98 	bl	8001380 <updateLedBufferVal>
				}
				//save value
				if(isButtonPressed(2))
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff f98b 	bl	800016c <isButtonPressed>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d017      	beq.n	8000e8c <fsm_manual_run+0x438>
				{
					green_timer = timer_man;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <fsm_manual_run+0x450>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <fsm_manual_run+0x44c>)
 8000e62:	6013      	str	r3, [r2, #0]
					yellow_timer = red_timer - green_timer;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <fsm_manual_run+0x454>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <fsm_manual_run+0x44c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <fsm_manual_run+0x458>)
 8000e70:	6013      	str	r3, [r2, #0]
				}

				break;
 8000e72:	e00b      	b.n	8000e8c <fsm_manual_run+0x438>

			default: break;
 8000e74:	bf00      	nop
 8000e76:	e00a      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e78:	bf00      	nop
 8000e7a:	e008      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e7c:	bf00      	nop
 8000e7e:	e006      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e80:	bf00      	nop
 8000e82:	e004      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e84:	bf00      	nop
 8000e86:	e002      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e88:	bf00      	nop
 8000e8a:	e000      	b.n	8000e8e <fsm_manual_run+0x43a>
				break;
 8000e8c:	bf00      	nop
		}
	}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000114 	.word	0x20000114
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	2000010c 	.word	0x2000010c
 8000ea0:	2000005c 	.word	0x2000005c
 8000ea4:	20000108 	.word	0x20000108
 8000ea8:	20000054 	.word	0x20000054
 8000eac:	20000058 	.word	0x20000058

08000eb0 <clearLed>:
int led_buffer[4] = {1, 2, 3, 4};
int counter1 = 0;
int counter2 = 0;

	void clearLed()
	{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <clearLed+0x44>)
 8000eba:	f001 fa66 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <clearLed+0x44>)
 8000ec4:	f001 fa61 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <clearLed+0x44>)
 8000ece:	f001 fa5c 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <clearLed+0x44>)
 8000ed8:	f001 fa57 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <clearLed+0x44>)
 8000ee2:	f001 fa52 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2120      	movs	r1, #32
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <clearLed+0x44>)
 8000eec:	f001 fa4d 	bl	800238a <HAL_GPIO_WritePin>
	}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <display7SEG>:

	void display7SEG(int num)
	{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
		  if(num == 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d122      	bne.n	8000f4c <display7SEG+0x54>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	48bd      	ldr	r0, [pc, #756]	; (8001200 <display7SEG+0x308>)
 8000f0c:	f001 fa3d 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	48ba      	ldr	r0, [pc, #744]	; (8001200 <display7SEG+0x308>)
 8000f16:	f001 fa38 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	48b8      	ldr	r0, [pc, #736]	; (8001200 <display7SEG+0x308>)
 8000f20:	f001 fa33 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2108      	movs	r1, #8
 8000f28:	48b5      	ldr	r0, [pc, #724]	; (8001200 <display7SEG+0x308>)
 8000f2a:	f001 fa2e 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	48b3      	ldr	r0, [pc, #716]	; (8001200 <display7SEG+0x308>)
 8000f34:	f001 fa29 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	48b0      	ldr	r0, [pc, #704]	; (8001200 <display7SEG+0x308>)
 8000f3e:	f001 fa24 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	48ae      	ldr	r0, [pc, #696]	; (8001200 <display7SEG+0x308>)
 8000f48:	f001 fa1f 	bl	800238a <HAL_GPIO_WritePin>
		  }
		  if(num == 1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d122      	bne.n	8000f98 <display7SEG+0xa0>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2101      	movs	r1, #1
 8000f56:	48aa      	ldr	r0, [pc, #680]	; (8001200 <display7SEG+0x308>)
 8000f58:	f001 fa17 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	48a7      	ldr	r0, [pc, #668]	; (8001200 <display7SEG+0x308>)
 8000f62:	f001 fa12 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	48a5      	ldr	r0, [pc, #660]	; (8001200 <display7SEG+0x308>)
 8000f6c:	f001 fa0d 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2108      	movs	r1, #8
 8000f74:	48a2      	ldr	r0, [pc, #648]	; (8001200 <display7SEG+0x308>)
 8000f76:	f001 fa08 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	48a0      	ldr	r0, [pc, #640]	; (8001200 <display7SEG+0x308>)
 8000f80:	f001 fa03 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2120      	movs	r1, #32
 8000f88:	489d      	ldr	r0, [pc, #628]	; (8001200 <display7SEG+0x308>)
 8000f8a:	f001 f9fe 	bl	800238a <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	489b      	ldr	r0, [pc, #620]	; (8001200 <display7SEG+0x308>)
 8000f94:	f001 f9f9 	bl	800238a <HAL_GPIO_WritePin>
		  }
		  if(num == 2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d122      	bne.n	8000fe4 <display7SEG+0xec>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4897      	ldr	r0, [pc, #604]	; (8001200 <display7SEG+0x308>)
 8000fa4:	f001 f9f1 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	4894      	ldr	r0, [pc, #592]	; (8001200 <display7SEG+0x308>)
 8000fae:	f001 f9ec 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4892      	ldr	r0, [pc, #584]	; (8001200 <display7SEG+0x308>)
 8000fb8:	f001 f9e7 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	488f      	ldr	r0, [pc, #572]	; (8001200 <display7SEG+0x308>)
 8000fc2:	f001 f9e2 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2110      	movs	r1, #16
 8000fca:	488d      	ldr	r0, [pc, #564]	; (8001200 <display7SEG+0x308>)
 8000fcc:	f001 f9dd 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	488a      	ldr	r0, [pc, #552]	; (8001200 <display7SEG+0x308>)
 8000fd6:	f001 f9d8 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4888      	ldr	r0, [pc, #544]	; (8001200 <display7SEG+0x308>)
 8000fe0:	f001 f9d3 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d122      	bne.n	8001030 <display7SEG+0x138>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4884      	ldr	r0, [pc, #528]	; (8001200 <display7SEG+0x308>)
 8000ff0:	f001 f9cb 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4881      	ldr	r0, [pc, #516]	; (8001200 <display7SEG+0x308>)
 8000ffa:	f001 f9c6 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2104      	movs	r1, #4
 8001002:	487f      	ldr	r0, [pc, #508]	; (8001200 <display7SEG+0x308>)
 8001004:	f001 f9c1 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2108      	movs	r1, #8
 800100c:	487c      	ldr	r0, [pc, #496]	; (8001200 <display7SEG+0x308>)
 800100e:	f001 f9bc 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	487a      	ldr	r0, [pc, #488]	; (8001200 <display7SEG+0x308>)
 8001018:	f001 f9b7 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2120      	movs	r1, #32
 8001020:	4877      	ldr	r0, [pc, #476]	; (8001200 <display7SEG+0x308>)
 8001022:	f001 f9b2 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4875      	ldr	r0, [pc, #468]	; (8001200 <display7SEG+0x308>)
 800102c:	f001 f9ad 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 4)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d122      	bne.n	800107c <display7SEG+0x184>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	2101      	movs	r1, #1
 800103a:	4871      	ldr	r0, [pc, #452]	; (8001200 <display7SEG+0x308>)
 800103c:	f001 f9a5 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	486e      	ldr	r0, [pc, #440]	; (8001200 <display7SEG+0x308>)
 8001046:	f001 f9a0 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2104      	movs	r1, #4
 800104e:	486c      	ldr	r0, [pc, #432]	; (8001200 <display7SEG+0x308>)
 8001050:	f001 f99b 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	2108      	movs	r1, #8
 8001058:	4869      	ldr	r0, [pc, #420]	; (8001200 <display7SEG+0x308>)
 800105a:	f001 f996 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2110      	movs	r1, #16
 8001062:	4867      	ldr	r0, [pc, #412]	; (8001200 <display7SEG+0x308>)
 8001064:	f001 f991 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2120      	movs	r1, #32
 800106c:	4864      	ldr	r0, [pc, #400]	; (8001200 <display7SEG+0x308>)
 800106e:	f001 f98c 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4862      	ldr	r0, [pc, #392]	; (8001200 <display7SEG+0x308>)
 8001078:	f001 f987 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 5)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d122      	bne.n	80010c8 <display7SEG+0x1d0>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	485e      	ldr	r0, [pc, #376]	; (8001200 <display7SEG+0x308>)
 8001088:	f001 f97f 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	2102      	movs	r1, #2
 8001090:	485b      	ldr	r0, [pc, #364]	; (8001200 <display7SEG+0x308>)
 8001092:	f001 f97a 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2104      	movs	r1, #4
 800109a:	4859      	ldr	r0, [pc, #356]	; (8001200 <display7SEG+0x308>)
 800109c:	f001 f975 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2108      	movs	r1, #8
 80010a4:	4856      	ldr	r0, [pc, #344]	; (8001200 <display7SEG+0x308>)
 80010a6:	f001 f970 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2110      	movs	r1, #16
 80010ae:	4854      	ldr	r0, [pc, #336]	; (8001200 <display7SEG+0x308>)
 80010b0:	f001 f96b 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4851      	ldr	r0, [pc, #324]	; (8001200 <display7SEG+0x308>)
 80010ba:	f001 f966 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2140      	movs	r1, #64	; 0x40
 80010c2:	484f      	ldr	r0, [pc, #316]	; (8001200 <display7SEG+0x308>)
 80010c4:	f001 f961 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 6)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d122      	bne.n	8001114 <display7SEG+0x21c>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2101      	movs	r1, #1
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <display7SEG+0x308>)
 80010d4:	f001 f959 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	2102      	movs	r1, #2
 80010dc:	4848      	ldr	r0, [pc, #288]	; (8001200 <display7SEG+0x308>)
 80010de:	f001 f954 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2104      	movs	r1, #4
 80010e6:	4846      	ldr	r0, [pc, #280]	; (8001200 <display7SEG+0x308>)
 80010e8:	f001 f94f 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2108      	movs	r1, #8
 80010f0:	4843      	ldr	r0, [pc, #268]	; (8001200 <display7SEG+0x308>)
 80010f2:	f001 f94a 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2110      	movs	r1, #16
 80010fa:	4841      	ldr	r0, [pc, #260]	; (8001200 <display7SEG+0x308>)
 80010fc:	f001 f945 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2120      	movs	r1, #32
 8001104:	483e      	ldr	r0, [pc, #248]	; (8001200 <display7SEG+0x308>)
 8001106:	f001 f940 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	483c      	ldr	r0, [pc, #240]	; (8001200 <display7SEG+0x308>)
 8001110:	f001 f93b 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 7)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b07      	cmp	r3, #7
 8001118:	d122      	bne.n	8001160 <display7SEG+0x268>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	4838      	ldr	r0, [pc, #224]	; (8001200 <display7SEG+0x308>)
 8001120:	f001 f933 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2102      	movs	r1, #2
 8001128:	4835      	ldr	r0, [pc, #212]	; (8001200 <display7SEG+0x308>)
 800112a:	f001 f92e 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	4833      	ldr	r0, [pc, #204]	; (8001200 <display7SEG+0x308>)
 8001134:	f001 f929 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2108      	movs	r1, #8
 800113c:	4830      	ldr	r0, [pc, #192]	; (8001200 <display7SEG+0x308>)
 800113e:	f001 f924 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	482e      	ldr	r0, [pc, #184]	; (8001200 <display7SEG+0x308>)
 8001148:	f001 f91f 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	2120      	movs	r1, #32
 8001150:	482b      	ldr	r0, [pc, #172]	; (8001200 <display7SEG+0x308>)
 8001152:	f001 f91a 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4829      	ldr	r0, [pc, #164]	; (8001200 <display7SEG+0x308>)
 800115c:	f001 f915 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 8)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d122      	bne.n	80011ac <display7SEG+0x2b4>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2101      	movs	r1, #1
 800116a:	4825      	ldr	r0, [pc, #148]	; (8001200 <display7SEG+0x308>)
 800116c:	f001 f90d 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2102      	movs	r1, #2
 8001174:	4822      	ldr	r0, [pc, #136]	; (8001200 <display7SEG+0x308>)
 8001176:	f001 f908 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2104      	movs	r1, #4
 800117e:	4820      	ldr	r0, [pc, #128]	; (8001200 <display7SEG+0x308>)
 8001180:	f001 f903 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2108      	movs	r1, #8
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <display7SEG+0x308>)
 800118a:	f001 f8fe 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2110      	movs	r1, #16
 8001192:	481b      	ldr	r0, [pc, #108]	; (8001200 <display7SEG+0x308>)
 8001194:	f001 f8f9 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2120      	movs	r1, #32
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <display7SEG+0x308>)
 800119e:	f001 f8f4 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	4816      	ldr	r0, [pc, #88]	; (8001200 <display7SEG+0x308>)
 80011a8:	f001 f8ef 	bl	800238a <HAL_GPIO_WritePin>
			  }
		  if(num == 9)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d122      	bne.n	80011f8 <display7SEG+0x300>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <display7SEG+0x308>)
 80011b8:	f001 f8e7 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <display7SEG+0x308>)
 80011c2:	f001 f8e2 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2104      	movs	r1, #4
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <display7SEG+0x308>)
 80011cc:	f001 f8dd 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2108      	movs	r1, #8
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <display7SEG+0x308>)
 80011d6:	f001 f8d8 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	2110      	movs	r1, #16
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <display7SEG+0x308>)
 80011e0:	f001 f8d3 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <display7SEG+0x308>)
 80011ea:	f001 f8ce 	bl	800238a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <display7SEG+0x308>)
 80011f4:	f001 f8c9 	bl	800238a <HAL_GPIO_WritePin>
			  }
	}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40010c00 	.word	0x40010c00

08001204 <update7SEG>:


	void update7SEG(int index)
	{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b03      	cmp	r3, #3
 8001210:	f200 808c 	bhi.w	800132c <update7SEG+0x128>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <update7SEG+0x18>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800122d 	.word	0x0800122d
 8001220:	0800126d 	.word	0x0800126d
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012ed 	.word	0x080012ed
		switch(index)
		{
			case 0:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	4840      	ldr	r0, [pc, #256]	; (8001334 <update7SEG+0x130>)
 8001234:	f001 f8a9 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123e:	483d      	ldr	r0, [pc, #244]	; (8001334 <update7SEG+0x130>)
 8001240:	f001 f8a3 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124a:	483a      	ldr	r0, [pc, #232]	; (8001334 <update7SEG+0x130>)
 800124c:	f001 f89d 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001256:	4837      	ldr	r0, [pc, #220]	; (8001334 <update7SEG+0x130>)
 8001258:	f001 f897 	bl	800238a <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 800125c:	4a36      	ldr	r2, [pc, #216]	; (8001338 <update7SEG+0x134>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe47 	bl	8000ef8 <display7SEG>
				break;
 800126a:	e05f      	b.n	800132c <update7SEG+0x128>
			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001272:	4830      	ldr	r0, [pc, #192]	; (8001334 <update7SEG+0x130>)
 8001274:	f001 f889 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <update7SEG+0x130>)
 8001280:	f001 f883 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	482a      	ldr	r0, [pc, #168]	; (8001334 <update7SEG+0x130>)
 800128c:	f001 f87d 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001296:	4827      	ldr	r0, [pc, #156]	; (8001334 <update7SEG+0x130>)
 8001298:	f001 f877 	bl	800238a <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <update7SEG+0x134>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe27 	bl	8000ef8 <display7SEG>
				break;
 80012aa:	e03f      	b.n	800132c <update7SEG+0x128>
			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <update7SEG+0x130>)
 80012b4:	f001 f869 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <update7SEG+0x130>)
 80012c0:	f001 f863 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <update7SEG+0x130>)
 80012cc:	f001 f85d 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d6:	4817      	ldr	r0, [pc, #92]	; (8001334 <update7SEG+0x130>)
 80012d8:	f001 f857 	bl	800238a <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <update7SEG+0x134>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe07 	bl	8000ef8 <display7SEG>
				break;
 80012ea:	e01f      	b.n	800132c <update7SEG+0x128>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	4810      	ldr	r0, [pc, #64]	; (8001334 <update7SEG+0x130>)
 80012f4:	f001 f849 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <update7SEG+0x130>)
 8001300:	f001 f843 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <update7SEG+0x130>)
 800130c:	f001 f83d 	bl	800238a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <update7SEG+0x130>)
 8001318:	f001 f837 	bl	800238a <HAL_GPIO_WritePin>
				display7SEG(led_buffer[index]);
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <update7SEG+0x134>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fde7 	bl	8000ef8 <display7SEG>
				break;
 800132a:	bf00      	nop
		}
	}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010800 	.word	0x40010800
 8001338:	20000060 	.word	0x20000060

0800133c <scanLedBuffer>:
	// run led
	void scanLedBuffer()
	{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
		if(is_time_expired(5))
 8001340:	2005      	movs	r0, #5
 8001342:	f000 fad9 	bl	80018f8 <is_time_expired>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d015      	beq.n	8001378 <scanLedBuffer+0x3c>
		{
			set_timer(5, 250);
 800134c:	21fa      	movs	r1, #250	; 0xfa
 800134e:	2005      	movs	r0, #5
 8001350:	f000 fab2 	bl	80018b8 <set_timer>
			update7SEG(index_led);
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <scanLedBuffer+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff53 	bl	8001204 <update7SEG>
			index_led++;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <scanLedBuffer+0x40>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <scanLedBuffer+0x40>)
 8001366:	6013      	str	r3, [r2, #0]
			if(index_led >= MAX_LED)
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <scanLedBuffer+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2204      	movs	r2, #4
 800136e:	4293      	cmp	r3, r2
 8001370:	db02      	blt.n	8001378 <scanLedBuffer+0x3c>
			{
				index_led = 0;
 8001372:	4b02      	ldr	r3, [pc, #8]	; (800137c <scanLedBuffer+0x40>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
			}
		}
	}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000110 	.word	0x20000110

08001380 <updateLedBufferVal>:

	void updateLedBufferVal(int val0, int val1, int val2, int val3)
	{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
		led_buffer[0] = val0;
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <updateLedBufferVal+0x30>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6013      	str	r3, [r2, #0]
		led_buffer[1] = val1;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <updateLedBufferVal+0x30>)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	6053      	str	r3, [r2, #4]
		led_buffer[2] = val2;
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <updateLedBufferVal+0x30>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6093      	str	r3, [r2, #8]
		led_buffer[3] = val3;
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <updateLedBufferVal+0x30>)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	60d3      	str	r3, [r2, #12]
	}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000060 	.word	0x20000060

080013b4 <displayLed>:

	void displayLed(int led_index)
	{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b0a      	subs	r3, #10
 80013c0:	2b0d      	cmp	r3, #13
 80013c2:	d834      	bhi.n	800142e <displayLed+0x7a>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <displayLed+0x18>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	08001405 	.word	0x08001405
 80013d0:	0800140b 	.word	0x0800140b
 80013d4:	08001411 	.word	0x08001411
 80013d8:	0800142f 	.word	0x0800142f
 80013dc:	0800142f 	.word	0x0800142f
 80013e0:	0800142f 	.word	0x0800142f
 80013e4:	0800142f 	.word	0x0800142f
 80013e8:	0800142f 	.word	0x0800142f
 80013ec:	0800142f 	.word	0x0800142f
 80013f0:	0800142f 	.word	0x0800142f
 80013f4:	08001417 	.word	0x08001417
 80013f8:	0800141d 	.word	0x0800141d
 80013fc:	08001423 	.word	0x08001423
 8001400:	08001429 	.word	0x08001429
		switch(led_index)
		{
			case RED_MAN:
							red_man();
 8001404:	f000 fc16 	bl	8001c34 <red_man>
				break;
 8001408:	e012      	b.n	8001430 <displayLed+0x7c>
			case YELLOW_MAN:
							yellow_man();
 800140a:	f000 fc3f 	bl	8001c8c <yellow_man>
				break;
 800140e:	e00f      	b.n	8001430 <displayLed+0x7c>
			case GREEN_MAN:
							green_man();
 8001410:	f000 fc68 	bl	8001ce4 <green_man>
				break;
 8001414:	e00c      	b.n	8001430 <displayLed+0x7c>
			case REDX_GREENY:
							redx_greeny();
 8001416:	f000 fb7d 	bl	8001b14 <redx_greeny>
				break;
 800141a:	e009      	b.n	8001430 <displayLed+0x7c>
			case REDX_YELLOWY:
							redx_yellowy();
 800141c:	f000 fb9e 	bl	8001b5c <redx_yellowy>
				break;
 8001420:	e006      	b.n	8001430 <displayLed+0x7c>
			case GREENX_REDY:
							greenx_redy();
 8001422:	f000 fbbf 	bl	8001ba4 <greenx_redy>
				break;
 8001426:	e003      	b.n	8001430 <displayLed+0x7c>
			case YELLOWX_REDY:
							yellowx_redy();
 8001428:	f000 fbe0 	bl	8001bec <yellowx_redy>
				break;
 800142c:	e000      	b.n	8001430 <displayLed+0x7c>
			default: break;
 800142e:	bf00      	nop
		}
	}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143c:	f000 fca4 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001440:	f000 f822 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f000 f8a8 	bl	8001598 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001448:	f000 f85a 	bl	8001500 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <main+0x40>)
 800144e:	f001 fbf9 	bl	8002c44 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  status = INIT;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <main+0x44>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  	  SCH_Init();
 8001458:	f000 f926 	bl	80016a8 <SCH_Init>
  	  SCH_Add_Task(fsm_automatic_run, 1, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	2101      	movs	r1, #1
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <main+0x48>)
 8001462:	f000 f99f 	bl	80017a4 <SCH_Add_Task>
  	  SCH_Add_Task(fsm_manual_run, 3, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2103      	movs	r1, #3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <main+0x4c>)
 800146c:	f000 f99a 	bl	80017a4 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Task();
 8001470:	f000 f95e 	bl	8001730 <SCH_Dispatch_Task>
 8001474:	e7fc      	b.n	8001470 <main+0x38>
 8001476:	bf00      	nop
 8001478:	20000130 	.word	0x20000130
 800147c:	2000010c 	.word	0x2000010c
 8001480:	080002c9 	.word	0x080002c9
 8001484:	08000a55 	.word	0x08000a55

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	; 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	; 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f001 ff9a 	bl	80033d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2310      	movs	r3, #16
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ff94 	bl	80023ec <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ca:	f000 f8e7 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fa00 	bl	80028ec <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f8d3 	bl	800169c <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3740      	adds	r7, #64	; 0x40
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_TIM2_Init+0x94>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_TIM2_Init+0x94>)
 8001526:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800152a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_TIM2_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_TIM2_Init+0x94>)
 8001534:	2209      	movs	r2, #9
 8001536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_TIM2_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_TIM2_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_TIM2_Init+0x94>)
 8001546:	f001 fb2d 	bl	8002ba4 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001550:	f000 f8a4 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_TIM2_Init+0x94>)
 8001562:	f001 fcab 	bl	8002ebc <HAL_TIM_ConfigClockSource>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800156c:	f000 f896 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_TIM2_Init+0x94>)
 800157e:	f001 fe83 	bl	8003288 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001588:	f000 f888 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000130 	.word	0x20000130

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <MX_GPIO_Init+0xd4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a2e      	ldr	r2, [pc, #184]	; (800166c <MX_GPIO_Init+0xd4>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <MX_GPIO_Init+0xd4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <MX_GPIO_Init+0xd4>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a28      	ldr	r2, [pc, #160]	; (800166c <MX_GPIO_Init+0xd4>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_GPIO_Init+0xd4>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <MX_GPIO_Init+0xd4>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <MX_GPIO_Init+0xd4>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <MX_GPIO_Init+0xd4>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_red_x_Pin|led_yellow_x_Pin|led_green_x_Pin|led_red_y_Pin
 80015f4:	2200      	movs	r2, #0
 80015f6:	f640 717f 	movw	r1, #3967	; 0xf7f
 80015fa:	481d      	ldr	r0, [pc, #116]	; (8001670 <MX_GPIO_Init+0xd8>)
 80015fc:	f000 fec5 	bl	800238a <HAL_GPIO_WritePin>
                          |led_yellow_y_Pin|led_green_y_Pin|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001600:	2200      	movs	r2, #0
 8001602:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001606:	481b      	ldr	r0, [pc, #108]	; (8001674 <MX_GPIO_Init+0xdc>)
 8001608:	f000 febf 	bl	800238a <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 800160c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	4815      	ldr	r0, [pc, #84]	; (8001678 <MX_GPIO_Init+0xe0>)
 8001622:	f000 fd21 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_red_x_Pin led_yellow_x_Pin led_green_x_Pin led_red_y_Pin
                           led_yellow_y_Pin led_green_y_Pin PA6 PA8
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = led_red_x_Pin|led_yellow_x_Pin|led_green_x_Pin|led_red_y_Pin
 8001626:	f640 737f 	movw	r3, #3967	; 0xf7f
 800162a:	613b      	str	r3, [r7, #16]
                          |led_yellow_y_Pin|led_green_y_Pin|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_GPIO_Init+0xd8>)
 8001640:	f000 fd12 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001644:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001648:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2302      	movs	r3, #2
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_GPIO_Init+0xdc>)
 800165e:	f000 fd03 	bl	8002068 <HAL_GPIO_Init>

}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000

0800167c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	timer_run();
 8001684:	f000 f952 	bl	800192c <timer_run>
	getKeyInput();
 8001688:	f7fe fd8a 	bl	80001a0 <getKeyInput>
	scanLedBuffer();
 800168c:	f7ff fe56 	bl	800133c <scanLedBuffer>
	SCH_Update();
 8001690:	f000 f81a 	bl	80016c8 <SCH_Update>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <SCH_Init>:
 */

#include "scheduler.h"

	void SCH_Init()
	{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
		SCH_Global_tick_counter = 0;
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SCH_Init+0x18>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
		SCH_TaskList = NULL;
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SCH_Init+0x1c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	2000012c 	.word	0x2000012c
 80016c4:	20000128 	.word	0x20000128

080016c8 <SCH_Update>:

	// timer_run
	void SCH_Update()
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
		SCH_Global_tick_counter++;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <SCH_Update+0x60>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a14      	ldr	r2, [pc, #80]	; (8001728 <SCH_Update+0x60>)
 80016d6:	6013      	str	r3, [r2, #0]
		if(SCH_TaskList == NULL) return; // no task
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <SCH_Update+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01f      	beq.n	8001720 <SCH_Update+0x58>
		Task *current_task = SCH_TaskList;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <SCH_Update+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	607b      	str	r3, [r7, #4]
		if (current_task->delay <= SCH_Global_tick_counter)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <SCH_Update+0x60>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d817      	bhi.n	8001722 <SCH_Update+0x5a>
		{
			current_task->pTask(); //run
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4798      	blx	r3
			if(current_task->period > 0) // repeatedly
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <SCH_Update+0x48>
			{
				current_task->delay = SCH_Global_tick_counter + current_task->period;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <SCH_Update+0x60>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e008      	b.n	8001722 <SCH_Update+0x5a>
			}
			else // period = 0
			{
				SCH_TaskList = current_task->next_task;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <SCH_Update+0x64>)
 8001716:	6013      	str	r3, [r2, #0]
				free(current_task);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f001 fe51 	bl	80033c0 <free>
 800171e:	e000      	b.n	8001722 <SCH_Update+0x5a>
		if(SCH_TaskList == NULL) return; // no task
 8001720:	bf00      	nop
			}
		}

	}
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000012c 	.word	0x2000012c
 800172c:	20000128 	.word	0x20000128

08001730 <SCH_Dispatch_Task>:
	// timer flag == 1
	void SCH_Dispatch_Task()
	{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
		Task *current_task = SCH_TaskList;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <SCH_Dispatch_Task+0x6c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	607b      	str	r3, [r7, #4]
		unsigned char taskIndex = 0; // delete task
 800173c:	2300      	movs	r3, #0
 800173e:	70fb      	strb	r3, [r7, #3]
		while(current_task != NULL)
 8001740:	e024      	b.n	800178c <SCH_Dispatch_Task+0x5c>
		{
			if (current_task->delay <= SCH_Global_tick_counter) // do task
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <SCH_Dispatch_Task+0x70>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d81b      	bhi.n	8001786 <SCH_Dispatch_Task+0x56>
			{
				current_task->pTask();
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4798      	blx	r3
				if(current_task->period > 0) // check repeatedly
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00d      	beq.n	8001778 <SCH_Dispatch_Task+0x48>
				{
					current_task->delay = SCH_Global_tick_counter + current_task->period;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <SCH_Dispatch_Task+0x70>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	441a      	add	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	605a      	str	r2, [r3, #4]
					current_task = current_task->next_task;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	607b      	str	r3, [r7, #4]
					taskIndex++; // next task
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	3301      	adds	r3, #1
 8001774:	70fb      	strb	r3, [r7, #3]
 8001776:	e009      	b.n	800178c <SCH_Dispatch_Task+0x5c>
				}
				else // period = 0 and delete task
				{
					unsigned char result = SCH_Delete_Task(taskIndex);
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f866 	bl	800184c <SCH_Delete_Task>
 8001780:	4603      	mov	r3, r0
 8001782:	70bb      	strb	r3, [r7, #2]
 8001784:	e002      	b.n	800178c <SCH_Dispatch_Task+0x5c>
				}
			}
			else // not time yet
			{
				current_task->next_task;
				taskIndex++;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	3301      	adds	r3, #1
 800178a:	70fb      	strb	r3, [r7, #3]
		while(current_task != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1d7      	bne.n	8001742 <SCH_Dispatch_Task+0x12>
			}

		}

	}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000128 	.word	0x20000128
 80017a0:	2000012c 	.word	0x2000012c

080017a4 <SCH_Add_Task>:
	// set timer
	unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD)
	{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
		Task *new_task = (Task*)malloc(sizeof(Task)); //memory allocation
 80017b0:	2010      	movs	r0, #16
 80017b2:	f001 fdfd 	bl	80033b0 <malloc>
 80017b6:	4603      	mov	r3, r0
 80017b8:	613b      	str	r3, [r7, #16]
		if(new_task == NULL) return SCH_MAX_TASKS; //fail (not enough)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <SCH_Add_Task+0x20>
 80017c0:	2328      	movs	r3, #40	; 0x28
 80017c2:	e03b      	b.n	800183c <SCH_Add_Task+0x98>
		new_task->pTask = pFunction;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]
		new_task->delay = SCH_Global_tick_counter + DELAY;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <SCH_Add_Task+0xa0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	441a      	add	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
		new_task->period = PERIOD;
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
		new_task->next_task = NULL;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
		// insert
		if(SCH_TaskList == NULL || SCH_TaskList->delay <= new_task->delay)
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <SCH_Add_Task+0xa4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <SCH_Add_Task+0x54>
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <SCH_Add_Task+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d807      	bhi.n	8001808 <SCH_Add_Task+0x64>
		{
			new_task->next_task = SCH_TaskList; // point to first task
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <SCH_Add_Task+0xa4>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	60da      	str	r2, [r3, #12]
			SCH_TaskList = new_task;// new task is first task
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <SCH_Add_Task+0xa4>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e018      	b.n	800183a <SCH_Add_Task+0x96>
		}
		else
		{
			Task *current = SCH_TaskList; // scan task
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <SCH_Add_Task+0xa4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	617b      	str	r3, [r7, #20]
			while((current->next_task != NULL) && (current->next_task->delay <= new_task->delay))
 800180e:	e002      	b.n	8001816 <SCH_Add_Task+0x72>
			{
				current = current->next_task; // priority current task
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	617b      	str	r3, [r7, #20]
			while((current->next_task != NULL) && (current->next_task->delay <= new_task->delay))
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <SCH_Add_Task+0x88>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d9f1      	bls.n	8001810 <SCH_Add_Task+0x6c>
			}
			new_task->next_task = current->next_task;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	60da      	str	r2, [r3, #12]
			current->next_task = new_task;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
		}
		 return 1; //success
 800183a:	2301      	movs	r3, #1
	}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000012c 	.word	0x2000012c
 8001848:	20000128 	.word	0x20000128

0800184c <SCH_Delete_Task>:

	unsigned char SCH_Delete_Task(const int TASK_INDEX)
	{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
		  Task* current = SCH_TaskList; //head
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <SCH_Delete_Task+0x68>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]
		  Task* previous = NULL; // before task of current
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
		  unsigned char i = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
		  while((current != NULL) && (i < TASK_INDEX))
 8001862:	e007      	b.n	8001874 <SCH_Delete_Task+0x28>
		  {
			  previous = current;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
		      current = current->next_task;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	617b      	str	r3, [r7, #20]
		      i++;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	3301      	adds	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
		  while((current != NULL) && (i < TASK_INDEX))
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <SCH_Delete_Task+0x36>
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dcf0      	bgt.n	8001864 <SCH_Delete_Task+0x18>
		  }
		  if(current == NULL)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <SCH_Delete_Task+0x40>
		  {
			  return 0;  // fail (Task not found)
 8001888:	2300      	movs	r3, #0
 800188a:	e00f      	b.n	80018ac <SCH_Delete_Task+0x60>
		  }

		  if(previous == NULL) // head is current
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <SCH_Delete_Task+0x50>
		  {
			  SCH_TaskList = current->next_task;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <SCH_Delete_Task+0x68>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e003      	b.n	80018a4 <SCH_Delete_Task+0x58>
		  }
		  else // task need delete not head
		  {
			  previous->next_task = current->next_task;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	60da      	str	r2, [r3, #12]
		  }
		  free(current);
 80018a4:	6978      	ldr	r0, [r7, #20]
 80018a6:	f001 fd8b 	bl	80033c0 <free>
		 return 1; // success
 80018aa:	2301      	movs	r3, #1
	}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000128 	.word	0x20000128

080018b8 <set_timer>:
#include "software_timer.h"

int timer_counter[max];
int timer_flag[max];
void set_timer(int index, int duration)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/tick;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4a09      	ldr	r2, [pc, #36]	; (80018ec <set_timer+0x34>)
 80018c6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ca:	1092      	asrs	r2, r2, #2
 80018cc:	17db      	asrs	r3, r3, #31
 80018ce:	1ad2      	subs	r2, r2, r3
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <set_timer+0x38>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <set_timer+0x3c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2100      	movs	r1, #0
 80018de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	66666667 	.word	0x66666667
 80018f0:	20000178 	.word	0x20000178
 80018f4:	200001a0 	.word	0x200001a0

080018f8 <is_time_expired>:

int is_time_expired(int index)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1)
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <is_time_expired+0x30>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <is_time_expired+0x22>
	{
		timer_flag[index] = 0;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <is_time_expired+0x30>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2100      	movs	r1, #0
 8001912:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <is_time_expired+0x24>
	}
	return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200001a0 	.word	0x200001a0

0800192c <timer_run>:

void timer_run()
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for(int i = 0; i < max; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e01c      	b.n	8001972 <timer_run+0x46>
	{
		if(timer_counter[i] > 0)
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <timer_run+0x58>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd08      	ble.n	8001956 <timer_run+0x2a>
		{
			timer_counter[i]--;
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <timer_run+0x58>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <timer_run+0x58>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(!timer_counter[i])
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <timer_run+0x58>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d104      	bne.n	800196c <timer_run+0x40>
		{
			timer_flag[i] = 1;
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <timer_run+0x5c>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2101      	movs	r1, #1
 8001968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < max; i++)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b09      	cmp	r3, #9
 8001976:	dddf      	ble.n	8001938 <timer_run+0xc>
		}
	}
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000178 	.word	0x20000178
 8001988:	200001a0 	.word	0x200001a0

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_MspInit+0x5c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_MspInit+0x5c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_MspInit+0x5c>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_MspInit+0x5c>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <HAL_MspInit+0x5c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_MspInit+0x5c>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_MspInit+0x60>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_MspInit+0x60>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000

080019f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a00:	d113      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x44>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_TIM_Base_MspInit+0x44>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_Base_MspInit+0x44>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201c      	movs	r0, #28
 8001a20:	f000 faeb 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a24:	201c      	movs	r0, #28
 8001a26:	f000 fb04 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7e:	f000 f9c9 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM2_IRQHandler+0x10>)
 8001a8e:	f001 f925 	bl	8002cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000130 	.word	0x20000130

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f001 fc46 	bl	800335c <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20002800 	.word	0x20002800
 8001afc:	00000400 	.word	0x00000400
 8001b00:	2000011c 	.word	0x2000011c
 8001b04:	200001e0 	.word	0x200001e0

08001b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <redx_greeny>:
 *      Author: PC
 */
#include "traffic_light.h"

	void  redx_greeny()
	{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	480e      	ldr	r0, [pc, #56]	; (8001b58 <redx_greeny+0x44>)
 8001b1e:	f000 fc34 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2104      	movs	r1, #4
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <redx_greeny+0x44>)
 8001b28:	f000 fc2f 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <redx_greeny+0x44>)
 8001b32:	f000 fc2a 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2120      	movs	r1, #32
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <redx_greeny+0x44>)
 8001b3c:	f000 fc25 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2108      	movs	r1, #8
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <redx_greeny+0x44>)
 8001b46:	f000 fc20 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	4802      	ldr	r0, [pc, #8]	; (8001b58 <redx_greeny+0x44>)
 8001b50:	f000 fc1b 	bl	800238a <HAL_GPIO_WritePin>
	}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010800 	.word	0x40010800

08001b5c <redx_yellowy>:

	void redx_yellowy()
	{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2101      	movs	r1, #1
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <redx_yellowy+0x44>)
 8001b66:	f000 fc10 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <redx_yellowy+0x44>)
 8001b70:	f000 fc0b 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	2102      	movs	r1, #2
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <redx_yellowy+0x44>)
 8001b7a:	f000 fc06 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2120      	movs	r1, #32
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <redx_yellowy+0x44>)
 8001b84:	f000 fc01 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <redx_yellowy+0x44>)
 8001b8e:	f000 fbfc 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2110      	movs	r1, #16
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <redx_yellowy+0x44>)
 8001b98:	f000 fbf7 	bl	800238a <HAL_GPIO_WritePin>
	}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <greenx_redy>:

	void greenx_redy()
	{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2101      	movs	r1, #1
 8001bac:	480e      	ldr	r0, [pc, #56]	; (8001be8 <greenx_redy+0x44>)
 8001bae:	f000 fbec 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	480c      	ldr	r0, [pc, #48]	; (8001be8 <greenx_redy+0x44>)
 8001bb8:	f000 fbe7 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <greenx_redy+0x44>)
 8001bc2:	f000 fbe2 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2120      	movs	r1, #32
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <greenx_redy+0x44>)
 8001bcc:	f000 fbdd 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <greenx_redy+0x44>)
 8001bd6:	f000 fbd8 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2110      	movs	r1, #16
 8001bde:	4802      	ldr	r0, [pc, #8]	; (8001be8 <greenx_redy+0x44>)
 8001be0:	f000 fbd3 	bl	800238a <HAL_GPIO_WritePin>
	}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40010800 	.word	0x40010800

08001bec <yellowx_redy>:

	void yellowx_redy()
	{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	480e      	ldr	r0, [pc, #56]	; (8001c30 <yellowx_redy+0x44>)
 8001bf6:	f000 fbc8 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <yellowx_redy+0x44>)
 8001c00:	f000 fbc3 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2102      	movs	r1, #2
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <yellowx_redy+0x44>)
 8001c0a:	f000 fbbe 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2120      	movs	r1, #32
 8001c12:	4807      	ldr	r0, [pc, #28]	; (8001c30 <yellowx_redy+0x44>)
 8001c14:	f000 fbb9 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <yellowx_redy+0x44>)
 8001c1e:	f000 fbb4 	bl	800238a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001c22:	2201      	movs	r2, #1
 8001c24:	2110      	movs	r1, #16
 8001c26:	4802      	ldr	r0, [pc, #8]	; (8001c30 <yellowx_redy+0x44>)
 8001c28:	f000 fbaf 	bl	800238a <HAL_GPIO_WritePin>
	}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40010800 	.word	0x40010800

08001c34 <red_man>:

	void red_man()
	{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
		if(is_time_expired(4))
 8001c38:	2004      	movs	r0, #4
 8001c3a:	f7ff fe5d 	bl	80018f8 <is_time_expired>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01f      	beq.n	8001c84 <red_man+0x50>
		{
			set_timer(4, 250);
 8001c44:	21fa      	movs	r1, #250	; 0xfa
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7ff fe36 	bl	80018b8 <set_timer>
			HAL_GPIO_TogglePin(led_red_x_GPIO_Port, led_red_x_Pin);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	480e      	ldr	r0, [pc, #56]	; (8001c88 <red_man+0x54>)
 8001c50:	f000 fbb3 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2104      	movs	r1, #4
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <red_man+0x54>)
 8001c5a:	f000 fb96 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2102      	movs	r1, #2
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <red_man+0x54>)
 8001c64:	f000 fb91 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	4806      	ldr	r0, [pc, #24]	; (8001c88 <red_man+0x54>)
 8001c6e:	f000 fb8c 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(led_red_y_GPIO_Port, led_red_y_Pin);
 8001c72:	2108      	movs	r1, #8
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <red_man+0x54>)
 8001c76:	f000 fba0 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	4802      	ldr	r0, [pc, #8]	; (8001c88 <red_man+0x54>)
 8001c80:	f000 fb83 	bl	800238a <HAL_GPIO_WritePin>
		}
	}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40010800 	.word	0x40010800

08001c8c <yellow_man>:

	void yellow_man()
	{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
		if(is_time_expired(4))
 8001c90:	2004      	movs	r0, #4
 8001c92:	f7ff fe31 	bl	80018f8 <is_time_expired>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01f      	beq.n	8001cdc <yellow_man+0x50>
		{
			set_timer(4, 250);
 8001c9c:	21fa      	movs	r1, #250	; 0xfa
 8001c9e:	2004      	movs	r0, #4
 8001ca0:	f7ff fe0a 	bl	80018b8 <set_timer>
			HAL_GPIO_TogglePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin);
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <yellow_man+0x54>)
 8001ca8:	f000 fb87 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_green_x_GPIO_Port, led_green_x_Pin, 1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2104      	movs	r1, #4
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <yellow_man+0x54>)
 8001cb2:	f000 fb6a 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <yellow_man+0x54>)
 8001cbc:	f000 fb65 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_green_y_GPIO_Port, led_green_y_Pin, 1);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <yellow_man+0x54>)
 8001cc6:	f000 fb60 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin);
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <yellow_man+0x54>)
 8001cce:	f000 fb74 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2108      	movs	r1, #8
 8001cd6:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <yellow_man+0x54>)
 8001cd8:	f000 fb57 	bl	800238a <HAL_GPIO_WritePin>
		}
	}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40010800 	.word	0x40010800

08001ce4 <green_man>:

	void green_man()
	{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
		if(is_time_expired(4))
 8001ce8:	2004      	movs	r0, #4
 8001cea:	f7ff fe05 	bl	80018f8 <is_time_expired>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01f      	beq.n	8001d34 <green_man+0x50>
		{
			set_timer(4, 250);
 8001cf4:	21fa      	movs	r1, #250	; 0xfa
 8001cf6:	2004      	movs	r0, #4
 8001cf8:	f7ff fdde 	bl	80018b8 <set_timer>
			HAL_GPIO_TogglePin(led_green_x_GPIO_Port, led_green_x_Pin);
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <green_man+0x54>)
 8001d00:	f000 fb5b 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_red_x_GPIO_Port, led_red_x_Pin, 1);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2101      	movs	r1, #1
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <green_man+0x54>)
 8001d0a:	f000 fb3e 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_yellow_x_GPIO_Port, led_yellow_x_Pin, 1);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2102      	movs	r1, #2
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <green_man+0x54>)
 8001d14:	f000 fb39 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_red_y_GPIO_Port, led_red_y_Pin, 1);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2108      	movs	r1, #8
 8001d1c:	4806      	ldr	r0, [pc, #24]	; (8001d38 <green_man+0x54>)
 8001d1e:	f000 fb34 	bl	800238a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(led_green_y_GPIO_Port, led_green_y_Pin);
 8001d22:	2120      	movs	r1, #32
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <green_man+0x54>)
 8001d26:	f000 fb48 	bl	80023ba <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(led_yellow_y_GPIO_Port, led_yellow_y_Pin, 1);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	4802      	ldr	r0, [pc, #8]	; (8001d38 <green_man+0x54>)
 8001d30:	f000 fb2b 	bl	800238a <HAL_GPIO_WritePin>
		}
	}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40010800 	.word	0x40010800

08001d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff fee4 	bl	8001b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d58:	4c09      	ldr	r4, [pc, #36]	; (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f001 faff 	bl	8003368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7ff fb65 	bl	8001438 <main>
  bx lr
 8001d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001d78:	080035ac 	.word	0x080035ac
  ldr r2, =_sbss
 8001d7c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001d80:	200001dc 	.word	0x200001dc

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_Init+0x28>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_Init+0x28>)
 8001d92:	f043 0310 	orr.w	r3, r3, #16
 8001d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f923 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fdf2 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f93b 	bl	800204e <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 f903 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000070 	.word	0x20000070
 8001e0c:	20000078 	.word	0x20000078
 8001e10:	20000074 	.word	0x20000074

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x1c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x20>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_IncTick+0x20>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20000078 	.word	0x20000078
 8001e34:	200001c8 	.word	0x200001c8

08001e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_GetTick+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	200001c8 	.word	0x200001c8

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <__NVIC_EnableIRQ+0x34>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff90 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff2d 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff42 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff90 	bl	8001f3c <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5f 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff35 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa2 	bl	8001fa0 <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e148      	b.n	800230e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800207c:	2201      	movs	r2, #1
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8137 	bne.w	8002308 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4aa3      	ldr	r2, [pc, #652]	; (800232c <HAL_GPIO_Init+0x2c4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d05e      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020a4:	4aa1      	ldr	r2, [pc, #644]	; (800232c <HAL_GPIO_Init+0x2c4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d875      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020aa:	4aa1      	ldr	r2, [pc, #644]	; (8002330 <HAL_GPIO_Init+0x2c8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d058      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020b0:	4a9f      	ldr	r2, [pc, #636]	; (8002330 <HAL_GPIO_Init+0x2c8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d86f      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020b6:	4a9f      	ldr	r2, [pc, #636]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d052      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020bc:	4a9d      	ldr	r2, [pc, #628]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d869      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020c2:	4a9d      	ldr	r2, [pc, #628]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04c      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020c8:	4a9b      	ldr	r2, [pc, #620]	; (8002338 <HAL_GPIO_Init+0x2d0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d863      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020ce:	4a9b      	ldr	r2, [pc, #620]	; (800233c <HAL_GPIO_Init+0x2d4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d046      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
 80020d4:	4a99      	ldr	r2, [pc, #612]	; (800233c <HAL_GPIO_Init+0x2d4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d85d      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d82a      	bhi.n	8002134 <HAL_GPIO_Init+0xcc>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d859      	bhi.n	8002196 <HAL_GPIO_Init+0x12e>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <HAL_GPIO_Init+0x80>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	08002163 	.word	0x08002163
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800214f 	.word	0x0800214f
 80020f4:	08002191 	.word	0x08002191
 80020f8:	08002197 	.word	0x08002197
 80020fc:	08002197 	.word	0x08002197
 8002100:	08002197 	.word	0x08002197
 8002104:	08002197 	.word	0x08002197
 8002108:	08002197 	.word	0x08002197
 800210c:	08002197 	.word	0x08002197
 8002110:	08002197 	.word	0x08002197
 8002114:	08002197 	.word	0x08002197
 8002118:	08002197 	.word	0x08002197
 800211c:	08002197 	.word	0x08002197
 8002120:	08002197 	.word	0x08002197
 8002124:	08002197 	.word	0x08002197
 8002128:	08002197 	.word	0x08002197
 800212c:	08002145 	.word	0x08002145
 8002130:	08002159 	.word	0x08002159
 8002134:	4a82      	ldr	r2, [pc, #520]	; (8002340 <HAL_GPIO_Init+0x2d8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213a:	e02c      	b.n	8002196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e029      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	3304      	adds	r3, #4
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e024      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	3308      	adds	r3, #8
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e01f      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	330c      	adds	r3, #12
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e01a      	b.n	8002198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216a:	2304      	movs	r3, #4
 800216c:	623b      	str	r3, [r7, #32]
          break;
 800216e:	e013      	b.n	8002198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002178:	2308      	movs	r3, #8
 800217a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	611a      	str	r2, [r3, #16]
          break;
 8002182:	e009      	b.n	8002198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002184:	2308      	movs	r3, #8
 8002186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	615a      	str	r2, [r3, #20]
          break;
 800218e:	e003      	b.n	8002198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x130>
          break;
 8002196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d801      	bhi.n	80021a2 <HAL_GPIO_Init+0x13a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_Init+0x13e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d802      	bhi.n	80021b4 <HAL_GPIO_Init+0x14c>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x152>
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3b08      	subs	r3, #8
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	210f      	movs	r1, #15
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	401a      	ands	r2, r3
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8090 	beq.w	8002308 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e8:	4b56      	ldr	r3, [pc, #344]	; (8002344 <HAL_GPIO_Init+0x2dc>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a55      	ldr	r2, [pc, #340]	; (8002344 <HAL_GPIO_Init+0x2dc>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_GPIO_Init+0x2dc>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002200:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_GPIO_Init+0x2e0>)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_GPIO_Init+0x2e4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00d      	beq.n	8002248 <HAL_GPIO_Init+0x1e0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x2e8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <HAL_GPIO_Init+0x1dc>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_GPIO_Init+0x2ec>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_GPIO_Init+0x1d8>
 800223c:	2302      	movs	r3, #2
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1e2>
 8002240:	2303      	movs	r3, #3
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1e2>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1e2>
 8002248:	2300      	movs	r3, #0
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800225a:	493b      	ldr	r1, [pc, #236]	; (8002348 <HAL_GPIO_Init+0x2e0>)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4937      	ldr	r1, [pc, #220]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002282:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	4933      	ldr	r1, [pc, #204]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 800228c:	4013      	ands	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	492d      	ldr	r1, [pc, #180]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022aa:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4929      	ldr	r1, [pc, #164]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4923      	ldr	r1, [pc, #140]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	491f      	ldr	r1, [pc, #124]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4919      	ldr	r1, [pc, #100]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	4915      	ldr	r1, [pc, #84]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 8002304:	4013      	ands	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	f47f aeaf 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	372c      	adds	r7, #44	; 0x2c
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	10320000 	.word	0x10320000
 8002330:	10310000 	.word	0x10310000
 8002334:	10220000 	.word	0x10220000
 8002338:	10210000 	.word	0x10210000
 800233c:	10120000 	.word	0x10120000
 8002340:	10110000 	.word	0x10110000
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	40010800 	.word	0x40010800
 8002350:	40010c00 	.word	0x40010c00
 8002354:	40011000 	.word	0x40011000
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e001      	b.n	800237e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]
 8002396:	4613      	mov	r3, r2
 8002398:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239a:	787b      	ldrb	r3, [r7, #1]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	041a      	lsls	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023cc:	887a      	ldrh	r2, [r7, #2]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4013      	ands	r3, r2
 80023d2:	041a      	lsls	r2, r3, #16
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	887b      	ldrh	r3, [r7, #2]
 80023da:	400b      	ands	r3, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e26c      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8087 	beq.w	800251a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800240c:	4b92      	ldr	r3, [pc, #584]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b04      	cmp	r3, #4
 8002416:	d00c      	beq.n	8002432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002418:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d112      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
 8002424:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d10b      	bne.n	800244a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06c      	beq.n	8002518 <HAL_RCC_OscConfig+0x12c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d168      	bne.n	8002518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e246      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x76>
 8002454:	4b80      	ldr	r3, [pc, #512]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a7f      	ldr	r2, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	e02e      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7a      	ldr	r2, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b78      	ldr	r3, [pc, #480]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0xbc>
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a71      	ldr	r2, [pc, #452]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6e      	ldr	r2, [pc, #440]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 80024a8:	4b6b      	ldr	r3, [pc, #428]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b68      	ldr	r3, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a67      	ldr	r2, [pc, #412]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fcb6 	bl	8001e38 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fcb2 	bl	8001e38 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1fa      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe4>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fca2 	bl	8001e38 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fc9e 	bl	8001e38 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1e6      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x10c>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x18c>
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1ba      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4939      	ldr	r1, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7ff fc57 	bl	8001e38 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7ff fc53 	bl	8001e38 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e19b      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4927      	ldr	r1, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fc36 	bl	8001e38 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff fc32 	bl	8001e38 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e17a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d03a      	beq.n	8002670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d019      	beq.n	8002636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7ff fc16 	bl	8001e38 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fc12 	bl	8001e38 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e15a      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800262e:	2001      	movs	r0, #1
 8002630:	f000 fa9a 	bl	8002b68 <RCC_Delay>
 8002634:	e01c      	b.n	8002670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7ff fbfc 	bl	8001e38 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002642:	e00f      	b.n	8002664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7ff fbf8 	bl	8001e38 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d908      	bls.n	8002664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e140      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	42420000 	.word	0x42420000
 8002660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e9      	bne.n	8002644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a6 	beq.w	80027ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b97      	ldr	r3, [pc, #604]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b94      	ldr	r3, [pc, #592]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]
 800269a:	4b91      	ldr	r3, [pc, #580]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b8e      	ldr	r3, [pc, #568]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a8a      	ldr	r2, [pc, #552]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7ff fbb9 	bl	8001e38 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7ff fbb5 	bl	8001e38 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b64      	cmp	r3, #100	; 0x64
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0fd      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x312>
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a7a      	ldr	r2, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e02d      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x334>
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a75      	ldr	r2, [pc, #468]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a72      	ldr	r2, [pc, #456]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	e01c      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x356>
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a6c      	ldr	r2, [pc, #432]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6213      	str	r3, [r2, #32]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x36e>
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7ff fb69 	bl	8001e38 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7ff fb65 	bl	8001e38 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0ab      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ee      	beq.n	800276a <HAL_RCC_OscConfig+0x37e>
 800278c:	e014      	b.n	80027b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7ff fb53 	bl	8001e38 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7ff fb4f 	bl	8001e38 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e095      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8081 	beq.w	80028d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d061      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d146      	bne.n	8002876 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7ff fb23 	bl	8001e38 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7ff fb1f 	bl	8001e38 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e067      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	492d      	ldr	r1, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a19      	ldr	r1, [r3, #32]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	430b      	orrs	r3, r1
 8002842:	4927      	ldr	r1, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff faf3 	bl	8001e38 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff faef 	bl	8001e38 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e037      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x46a>
 8002874:	e02f      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_RCC_OscConfig+0x4fc>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fadc 	bl	8001e38 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff fad8 	bl	8001e38 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e020      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x498>
 80028a2:	e018      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e013      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42420060 	.word	0x42420060

080028ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0d0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	4965      	ldr	r1, [pc, #404]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d020      	beq.n	800297e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800296a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	494d      	ldr	r1, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d040      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4936      	ldr	r1, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7ff fa2c 	bl	8001e38 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7ff fa28 	bl	8001e38 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e053      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d210      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f98a 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08003580 	.word	0x08003580
 8002ab8:	20000070 	.word	0x20000070
 8002abc:	20000074 	.word	0x20000074

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aee:	e027      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af2:	613b      	str	r3, [r7, #16]
      break;
 8002af4:	e027      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0c5b      	lsrs	r3, r3, #17
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b22:	fb02 f203 	mul.w	r2, r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e004      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b42:	613b      	str	r3, [r7, #16]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	693b      	ldr	r3, [r7, #16]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200
 8002b5c:	08003590 	.word	0x08003590
 8002b60:	080035a0 	.word	0x080035a0
 8002b64:	003d0900 	.word	0x003d0900

08002b68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <RCC_Delay+0x34>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <RCC_Delay+0x38>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0a5b      	lsrs	r3, r3, #9
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b84:	bf00      	nop
  }
  while (Delay --);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	60fa      	str	r2, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <RCC_Delay+0x1c>
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	20000070 	.word	0x20000070
 8002ba0:	10624dd3 	.word	0x10624dd3

08002ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e041      	b.n	8002c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe ff10 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f000 fa56 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d001      	beq.n	8002c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e035      	b.n	8002cc8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_TIM_Base_Start_IT+0x90>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_TIM_Base_Start_IT+0x4e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c86:	d004      	beq.n	8002c92 <HAL_TIM_Base_Start_IT+0x4e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_TIM_Base_Start_IT+0x94>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d111      	bne.n	8002cb6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d010      	beq.n	8002cc6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb4:	e007      	b.n	8002cc6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400

08002cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d020      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0202 	mvn.w	r2, #2
 8002d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f998 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f98b 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f99a 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0204 	mvn.w	r2, #4
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f972 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f965 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f974 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d020      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0208 	mvn.w	r2, #8
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2204      	movs	r2, #4
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f94c 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f93f 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f94e 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d020      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0210 	mvn.w	r2, #16
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f926 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f919 	bl	800304a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f928 	bl	800306e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0201 	mvn.w	r2, #1
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fc1a 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa6f 	bl	800334a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8f8 	bl	8003080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0220 	mvn.w	r2, #32
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa42 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0b4      	b.n	8003042 <HAL_TIM_ConfigClockSource+0x186>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d03e      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0xd4>
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	f200 8087 	bhi.w	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1e:	f000 8086 	beq.w	800302e <HAL_TIM_ConfigClockSource+0x172>
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	d87f      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b70      	cmp	r3, #112	; 0x70
 8002f2a:	d01a      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0xa6>
 8002f2c:	2b70      	cmp	r3, #112	; 0x70
 8002f2e:	d87b      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b60      	cmp	r3, #96	; 0x60
 8002f32:	d050      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f34:	2b60      	cmp	r3, #96	; 0x60
 8002f36:	d877      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b50      	cmp	r3, #80	; 0x50
 8002f3a:	d03c      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f3c:	2b50      	cmp	r3, #80	; 0x50
 8002f3e:	d873      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d058      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d86f      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b30      	cmp	r3, #48	; 0x30
 8002f4a:	d064      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x15a>
 8002f4c:	2b30      	cmp	r3, #48	; 0x30
 8002f4e:	d86b      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d060      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x15a>
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d867      	bhi.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d05c      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x15a>
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d05a      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x15a>
 8002f60:	e062      	b.n	8003028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f000 f96a 	bl	800324a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	609a      	str	r2, [r3, #8]
      break;
 8002f8e:	e04f      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f000 f953 	bl	800324a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fb2:	609a      	str	r2, [r3, #8]
      break;
 8002fb4:	e03c      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f000 f8ca 	bl	800315c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2150      	movs	r1, #80	; 0x50
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f921 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8002fd4:	e02c      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f000 f8e8 	bl	80031b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2160      	movs	r1, #96	; 0x60
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f911 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e01c      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	461a      	mov	r2, r3
 8003004:	f000 f8aa 	bl	800315c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f901 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8003014:	e00c      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f000 f8f8 	bl	8003216 <TIM_ITRx_SetConfig>
      break;
 8003026:	e003      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      break;
 800302c:	e000      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800302e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
	...

08003094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <TIM_Base_SetConfig+0xc0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <TIM_Base_SetConfig+0x28>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d003      	beq.n	80030bc <TIM_Base_SetConfig+0x28>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a28      	ldr	r2, [pc, #160]	; (8003158 <TIM_Base_SetConfig+0xc4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d108      	bne.n	80030ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <TIM_Base_SetConfig+0xc0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_Base_SetConfig+0x52>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0x52>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <TIM_Base_SetConfig+0xc4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d108      	bne.n	80030f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <TIM_Base_SetConfig+0xc0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f023 0201 	bic.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]
  }
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400

0800315c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f023 0201 	bic.w	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f023 030a 	bic.w	r3, r3, #10
 8003198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f023 0210 	bic.w	r2, r3, #16
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	031b      	lsls	r3, r3, #12
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	f043 0307 	orr.w	r3, r3, #7
 8003238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800324a:	b480      	push	{r7}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003264:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	431a      	orrs	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4313      	orrs	r3, r2
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	609a      	str	r2, [r3, #8]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800329c:	2302      	movs	r3, #2
 800329e:	e041      	b.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d004      	beq.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	4313      	orrs	r3, r2
 8003308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40000400 	.word	0x40000400

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <__errno>:
 800335c:	4b01      	ldr	r3, [pc, #4]	; (8003364 <__errno+0x8>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	2000007c 	.word	0x2000007c

08003368 <__libc_init_array>:
 8003368:	b570      	push	{r4, r5, r6, lr}
 800336a:	2600      	movs	r6, #0
 800336c:	4d0c      	ldr	r5, [pc, #48]	; (80033a0 <__libc_init_array+0x38>)
 800336e:	4c0d      	ldr	r4, [pc, #52]	; (80033a4 <__libc_init_array+0x3c>)
 8003370:	1b64      	subs	r4, r4, r5
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	42a6      	cmp	r6, r4
 8003376:	d109      	bne.n	800338c <__libc_init_array+0x24>
 8003378:	f000 f8f6 	bl	8003568 <_init>
 800337c:	2600      	movs	r6, #0
 800337e:	4d0a      	ldr	r5, [pc, #40]	; (80033a8 <__libc_init_array+0x40>)
 8003380:	4c0a      	ldr	r4, [pc, #40]	; (80033ac <__libc_init_array+0x44>)
 8003382:	1b64      	subs	r4, r4, r5
 8003384:	10a4      	asrs	r4, r4, #2
 8003386:	42a6      	cmp	r6, r4
 8003388:	d105      	bne.n	8003396 <__libc_init_array+0x2e>
 800338a:	bd70      	pop	{r4, r5, r6, pc}
 800338c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003390:	4798      	blx	r3
 8003392:	3601      	adds	r6, #1
 8003394:	e7ee      	b.n	8003374 <__libc_init_array+0xc>
 8003396:	f855 3b04 	ldr.w	r3, [r5], #4
 800339a:	4798      	blx	r3
 800339c:	3601      	adds	r6, #1
 800339e:	e7f2      	b.n	8003386 <__libc_init_array+0x1e>
 80033a0:	080035a4 	.word	0x080035a4
 80033a4:	080035a4 	.word	0x080035a4
 80033a8:	080035a4 	.word	0x080035a4
 80033ac:	080035a8 	.word	0x080035a8

080033b0 <malloc>:
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <malloc+0xc>)
 80033b2:	4601      	mov	r1, r0
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	f000 b85f 	b.w	8003478 <_malloc_r>
 80033ba:	bf00      	nop
 80033bc:	2000007c 	.word	0x2000007c

080033c0 <free>:
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <free+0xc>)
 80033c2:	4601      	mov	r1, r0
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	f000 b80b 	b.w	80033e0 <_free_r>
 80033ca:	bf00      	nop
 80033cc:	2000007c 	.word	0x2000007c

080033d0 <memset>:
 80033d0:	4603      	mov	r3, r0
 80033d2:	4402      	add	r2, r0
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d100      	bne.n	80033da <memset+0xa>
 80033d8:	4770      	bx	lr
 80033da:	f803 1b01 	strb.w	r1, [r3], #1
 80033de:	e7f9      	b.n	80033d4 <memset+0x4>

080033e0 <_free_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4605      	mov	r5, r0
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d043      	beq.n	8003470 <_free_r+0x90>
 80033e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ec:	1f0c      	subs	r4, r1, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bfb8      	it	lt
 80033f2:	18e4      	addlt	r4, r4, r3
 80033f4:	f000 f8aa 	bl	800354c <__malloc_lock>
 80033f8:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <_free_r+0x94>)
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	4610      	mov	r0, r2
 80033fe:	b933      	cbnz	r3, 800340e <_free_r+0x2e>
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6014      	str	r4, [r2, #0]
 8003404:	4628      	mov	r0, r5
 8003406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800340a:	f000 b8a5 	b.w	8003558 <__malloc_unlock>
 800340e:	42a3      	cmp	r3, r4
 8003410:	d90a      	bls.n	8003428 <_free_r+0x48>
 8003412:	6821      	ldr	r1, [r4, #0]
 8003414:	1862      	adds	r2, r4, r1
 8003416:	4293      	cmp	r3, r2
 8003418:	bf01      	itttt	eq
 800341a:	681a      	ldreq	r2, [r3, #0]
 800341c:	685b      	ldreq	r3, [r3, #4]
 800341e:	1852      	addeq	r2, r2, r1
 8003420:	6022      	streq	r2, [r4, #0]
 8003422:	6063      	str	r3, [r4, #4]
 8003424:	6004      	str	r4, [r0, #0]
 8003426:	e7ed      	b.n	8003404 <_free_r+0x24>
 8003428:	461a      	mov	r2, r3
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	b10b      	cbz	r3, 8003432 <_free_r+0x52>
 800342e:	42a3      	cmp	r3, r4
 8003430:	d9fa      	bls.n	8003428 <_free_r+0x48>
 8003432:	6811      	ldr	r1, [r2, #0]
 8003434:	1850      	adds	r0, r2, r1
 8003436:	42a0      	cmp	r0, r4
 8003438:	d10b      	bne.n	8003452 <_free_r+0x72>
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	4401      	add	r1, r0
 800343e:	1850      	adds	r0, r2, r1
 8003440:	4283      	cmp	r3, r0
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	d1de      	bne.n	8003404 <_free_r+0x24>
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4401      	add	r1, r0
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	6053      	str	r3, [r2, #4]
 8003450:	e7d8      	b.n	8003404 <_free_r+0x24>
 8003452:	d902      	bls.n	800345a <_free_r+0x7a>
 8003454:	230c      	movs	r3, #12
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	e7d4      	b.n	8003404 <_free_r+0x24>
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	1821      	adds	r1, r4, r0
 800345e:	428b      	cmp	r3, r1
 8003460:	bf01      	itttt	eq
 8003462:	6819      	ldreq	r1, [r3, #0]
 8003464:	685b      	ldreq	r3, [r3, #4]
 8003466:	1809      	addeq	r1, r1, r0
 8003468:	6021      	streq	r1, [r4, #0]
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	6054      	str	r4, [r2, #4]
 800346e:	e7c9      	b.n	8003404 <_free_r+0x24>
 8003470:	bd38      	pop	{r3, r4, r5, pc}
 8003472:	bf00      	nop
 8003474:	20000120 	.word	0x20000120

08003478 <_malloc_r>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	1ccd      	adds	r5, r1, #3
 800347c:	f025 0503 	bic.w	r5, r5, #3
 8003480:	3508      	adds	r5, #8
 8003482:	2d0c      	cmp	r5, #12
 8003484:	bf38      	it	cc
 8003486:	250c      	movcc	r5, #12
 8003488:	2d00      	cmp	r5, #0
 800348a:	4606      	mov	r6, r0
 800348c:	db01      	blt.n	8003492 <_malloc_r+0x1a>
 800348e:	42a9      	cmp	r1, r5
 8003490:	d903      	bls.n	800349a <_malloc_r+0x22>
 8003492:	230c      	movs	r3, #12
 8003494:	6033      	str	r3, [r6, #0]
 8003496:	2000      	movs	r0, #0
 8003498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349a:	f000 f857 	bl	800354c <__malloc_lock>
 800349e:	4921      	ldr	r1, [pc, #132]	; (8003524 <_malloc_r+0xac>)
 80034a0:	680a      	ldr	r2, [r1, #0]
 80034a2:	4614      	mov	r4, r2
 80034a4:	b99c      	cbnz	r4, 80034ce <_malloc_r+0x56>
 80034a6:	4f20      	ldr	r7, [pc, #128]	; (8003528 <_malloc_r+0xb0>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b923      	cbnz	r3, 80034b6 <_malloc_r+0x3e>
 80034ac:	4621      	mov	r1, r4
 80034ae:	4630      	mov	r0, r6
 80034b0:	f000 f83c 	bl	800352c <_sbrk_r>
 80034b4:	6038      	str	r0, [r7, #0]
 80034b6:	4629      	mov	r1, r5
 80034b8:	4630      	mov	r0, r6
 80034ba:	f000 f837 	bl	800352c <_sbrk_r>
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	d123      	bne.n	800350a <_malloc_r+0x92>
 80034c2:	230c      	movs	r3, #12
 80034c4:	4630      	mov	r0, r6
 80034c6:	6033      	str	r3, [r6, #0]
 80034c8:	f000 f846 	bl	8003558 <__malloc_unlock>
 80034cc:	e7e3      	b.n	8003496 <_malloc_r+0x1e>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	1b5b      	subs	r3, r3, r5
 80034d2:	d417      	bmi.n	8003504 <_malloc_r+0x8c>
 80034d4:	2b0b      	cmp	r3, #11
 80034d6:	d903      	bls.n	80034e0 <_malloc_r+0x68>
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	441c      	add	r4, r3
 80034dc:	6025      	str	r5, [r4, #0]
 80034de:	e004      	b.n	80034ea <_malloc_r+0x72>
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	42a2      	cmp	r2, r4
 80034e4:	bf0c      	ite	eq
 80034e6:	600b      	streq	r3, [r1, #0]
 80034e8:	6053      	strne	r3, [r2, #4]
 80034ea:	4630      	mov	r0, r6
 80034ec:	f000 f834 	bl	8003558 <__malloc_unlock>
 80034f0:	f104 000b 	add.w	r0, r4, #11
 80034f4:	1d23      	adds	r3, r4, #4
 80034f6:	f020 0007 	bic.w	r0, r0, #7
 80034fa:	1ac2      	subs	r2, r0, r3
 80034fc:	d0cc      	beq.n	8003498 <_malloc_r+0x20>
 80034fe:	1a1b      	subs	r3, r3, r0
 8003500:	50a3      	str	r3, [r4, r2]
 8003502:	e7c9      	b.n	8003498 <_malloc_r+0x20>
 8003504:	4622      	mov	r2, r4
 8003506:	6864      	ldr	r4, [r4, #4]
 8003508:	e7cc      	b.n	80034a4 <_malloc_r+0x2c>
 800350a:	1cc4      	adds	r4, r0, #3
 800350c:	f024 0403 	bic.w	r4, r4, #3
 8003510:	42a0      	cmp	r0, r4
 8003512:	d0e3      	beq.n	80034dc <_malloc_r+0x64>
 8003514:	1a21      	subs	r1, r4, r0
 8003516:	4630      	mov	r0, r6
 8003518:	f000 f808 	bl	800352c <_sbrk_r>
 800351c:	3001      	adds	r0, #1
 800351e:	d1dd      	bne.n	80034dc <_malloc_r+0x64>
 8003520:	e7cf      	b.n	80034c2 <_malloc_r+0x4a>
 8003522:	bf00      	nop
 8003524:	20000120 	.word	0x20000120
 8003528:	20000124 	.word	0x20000124

0800352c <_sbrk_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	2300      	movs	r3, #0
 8003530:	4d05      	ldr	r5, [pc, #20]	; (8003548 <_sbrk_r+0x1c>)
 8003532:	4604      	mov	r4, r0
 8003534:	4608      	mov	r0, r1
 8003536:	602b      	str	r3, [r5, #0]
 8003538:	f7fe fab0 	bl	8001a9c <_sbrk>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_sbrk_r+0x1a>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b103      	cbz	r3, 8003546 <_sbrk_r+0x1a>
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	200001cc 	.word	0x200001cc

0800354c <__malloc_lock>:
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <__malloc_lock+0x8>)
 800354e:	f000 b809 	b.w	8003564 <__retarget_lock_acquire_recursive>
 8003552:	bf00      	nop
 8003554:	200001d4 	.word	0x200001d4

08003558 <__malloc_unlock>:
 8003558:	4801      	ldr	r0, [pc, #4]	; (8003560 <__malloc_unlock+0x8>)
 800355a:	f000 b804 	b.w	8003566 <__retarget_lock_release_recursive>
 800355e:	bf00      	nop
 8003560:	200001d4 	.word	0x200001d4

08003564 <__retarget_lock_acquire_recursive>:
 8003564:	4770      	bx	lr

08003566 <__retarget_lock_release_recursive>:
 8003566:	4770      	bx	lr

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
